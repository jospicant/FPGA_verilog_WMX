// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input v381569,
 input vec8411,
 input vfc0c62,
 output ve0793c,
 output v86c7f4,
 output v8a6138,
 output v7c09bb,
 output [0:7] vinit
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w0 = vec8411;
 assign w1 = vfc0c62;
 assign ve0793c = w2;
 assign v86c7f4 = w3;
 assign v8a6138 = w4;
 assign v7c09bb = w5;
 assign w6 = v381569;
 main_vee177d vee177d (
  .reset(w0),
  .clk(w1),
  .Ch1(w2),
  .Ch2(w3),
  .Ch3(w4),
  .Ch4(w5),
  .InPPM_neg(w6)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*-- Deco_PPM_4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Decodificador PPM 4 bits
/*-------------------------------------------------*/

module main_vee177d (
 input InPPM_neg,
 input reset,
 input clk,
 output Ch1,
 output Ch2,
 output Ch3,
 output Ch4
);
 
 parameter [2:0] S0=0,S1=1,S2=2,S3=3,S4=4;              //Poner nombres a los estados
 
 reg Ch1=0,Ch2=0,Ch3=0,Ch4=0;                           //Inicializo canales
 
 reg [2:0]  estadoActual=0, estadoNext=0;               //Inicializo estados
 
 // bloque secuencial. Capturar estado Actual
 
 always @(posedge clk )
 if(reset) estadoActual <= S0; 
 else estadoActual <= estadoNext;
 
 // Bloque combinacional. Calculamos estado siguiente y valor de las
 // salidas en función de las entradas y del estado actual.
 
 always @(reset or InPPM_neg or estadoActual)  //  estado siguiente = función ( entradas y estado actual)
 begin
   //valores por defecto. justo antes del case pongo valores por defecto y en el case solo cambiamos
   //la salida que se ve afectada y las demás tomarán los valores por defecto
   Ch1   = 0;
   Ch2   = 0;
   Ch3   = 0;
   Ch4   = 0;
   estadoNext   = S0; 
   
   case(estadoActual)  //Evaluación del estado actual
      S0:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S1;   Ch1 = 1'b1;   end 
         else                      estadoNext = S0;  
         end
      S1:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S2;   Ch2 = 1'b1;   end 
         else              begin   estadoNext = S1;   Ch1 = 1'b1;   end
         end
      S2:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S3;   Ch3 = 1'b1;   end 
         else              begin   estadoNext = S2;   Ch2 = 1'b1;   end
         end
      S3:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S4;   Ch4 = 1'b1;   end 
         else              begin   estadoNext = S3;   Ch3 = 1'b1;   end
         end
      S4:begin                                   
         if( InPPM_neg  )          estadoNext = S0;
         else              begin   estadoNext = S4;   Ch4 = 1'b1;  end
         end
      default:                     estadoNext = S0;
    endcase
 end
endmodule
