// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main #(
 parameter vb79322 = 2
) (
 input vclk,
 output v4df5ff,
 output v20658b,
 output v08c24f,
 output vd8d171,
 output [0:7] vinit
);
 localparam p9 = vb79322;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w10;
 wire w11;
 wire [0:1] w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 assign vd8d171 = w0;
 assign v08c24f = w1;
 assign v20658b = w2;
 assign v4df5ff = w3;
 assign w16 = vclk;
 assign w17 = vclk;
 assign w18 = vclk;
 assign w19 = vclk;
 assign w20 = vclk;
 assign w21 = vclk;
 assign w22 = vclk;
 assign w17 = w16;
 assign w18 = w16;
 assign w18 = w17;
 assign w19 = w16;
 assign w19 = w17;
 assign w19 = w18;
 assign w20 = w16;
 assign w20 = w17;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w16;
 assign w21 = w17;
 assign w21 = w18;
 assign w21 = w19;
 assign w21 = w20;
 assign w22 = w16;
 assign w22 = w17;
 assign w22 = w18;
 assign w22 = w19;
 assign w22 = w20;
 assign w22 = w21;
 v35f267 v51804b (
  .vcbab45(w4),
  .v0e28cb(w13)
 );
 v70170e v9f6556 (
  .v755ffa(w0),
  .v9c8ff5(w1),
  .v5ad277(w2),
  .v980ce1(w3),
  .v35fe10(w4),
  .v357ff7(w16)
 );
 v28cfaa v57b083 (
  .vd7f8af(w5),
  .v7e70ae(w6),
  .vb186da(w7),
  .v381ebf(w8),
  .vc93bbe(w13),
  .vc13c07(w14),
  .v9b870f(w15)
 );
 ve79148 v5ec64c (
  .v7c533e(w10),
  .ve61673(w11),
  .vd76104(w12),
  .vdd729a(w17)
 );
 va9a5bc #(
  .vfb06ae(p9)
 ) vcf3242 (
  .v2a8434(w10),
  .vac0eb2(w18)
 );
 v21cfcc v815532 (
  .v9fb85f(w11)
 );
 vfc9dac v366a3f (
  .v8b19dd(w12),
  .v3f8943(w14),
  .v64d863(w15)
 );
 vbdf794 vc06180 (
  .vbb19a2(w7),
  .v8e52a4(w19)
 );
 v54aa42 v962121 (
  .vbb19a2(w6),
  .v8e52a4(w20)
 );
 ve2a8d5 veaca02 (
  .vbb19a2(w5),
  .v8e52a4(w21)
 );
 v6b5b6a vde24fa (
  .vbb19a2(w8),
  .v8e52a4(w22)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module v70170e (
 input v35fe10,
 input v357ff7,
 output v980ce1,
 output v5ad277,
 output v9c8ff5,
 output v755ffa
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 assign w0 = v35fe10;
 assign w1 = v357ff7;
 assign w2 = v357ff7;
 assign w4 = v357ff7;
 assign w6 = v357ff7;
 assign v980ce1 = w9;
 assign v5ad277 = w10;
 assign v9c8ff5 = w11;
 assign v755ffa = w12;
 assign w2 = w1;
 assign w4 = w1;
 assign w4 = w2;
 assign w6 = w1;
 assign w6 = w2;
 assign w6 = w4;
 assign w8 = w5;
 v3bfe20 vdbde06 (
  .ve7f5e6(w0),
  .v717e81(w1),
  .v3c12b5(w3)
 );
 veba410 v9b4ca7 (
  .vdd729a(w2),
  .v0b79d7(w7),
  .ve61673(w8)
 );
 v7eacdf vc57c79 (
  .v10eedb(w3),
  .v0884a0(w4),
  .v2dffca(w5)
 );
 v15dcc6 v2020db (
  .v381569(w5),
  .vfc0c62(w6),
  .vec8411(w7),
  .ve0793c(w9),
  .v86c7f4(w10),
  .v8a6138(w11),
  .v7c09bb(w12)
 );
endmodule

/*-------------------------------------------------*/
/*-- Dec_PPMx4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Decodificador 4 canales PPM
/*-------------------------------------------------*/
//---- Top entity
module v3bfe20 (
 input v717e81,
 input ve7f5e6,
 output v3c12b5
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = ve7f5e6;
 assign w1 = v717e81;
 assign v3c12b5 = w2;
 v3bfe20_v683a9f v683a9f (
  .i(w0),
  .clk(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sync  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sincronizar las entradas de datos con el reloj del sistema
/*-------------------------------------------------*/

module v3bfe20_v683a9f (
 input clk,
 input i,
 output o
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d1;
 reg d2;
 
 always @(posedge clk)
  d1 <= i;
  
 always @(posedge clk)
   d2 <= d1;
   
 assign o = d2;
endmodule
//---- Top entity
module veba410 (
 input ve61673,
 input vdd729a,
 output v0b79d7
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vdd729a;
 assign w1 = ve61673;
 assign v0b79d7 = w2;
 veba410_vbd6086 vbd6086 (
  .clk(w0),
  .rst(w1),
  .ov(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Overflow_4ms  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador Reset y overflow a los 4ms
/*-------------------------------------------------*/

module veba410_vbd6086 (
 input rst,
 input clk,
 output ov
);
 
 reg [15:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)  qi <= 0;
   else           qi <= qi + 1;
       
 //-- Comprobar overflow
 assign ov = (qi == 48000 );
     
endmodule
//---- Top entity
module v7eacdf (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v7eacdf_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bajada  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente
/*-------------------------------------------------*/

module v7eacdf_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (q & ~i);  
endmodule
//---- Top entity
module v15dcc6 (
 input v381569,
 input vec8411,
 input vfc0c62,
 output ve0793c,
 output v86c7f4,
 output v8a6138,
 output v7c09bb
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w0 = vec8411;
 assign w1 = vfc0c62;
 assign ve0793c = w2;
 assign v86c7f4 = w3;
 assign v8a6138 = w4;
 assign v7c09bb = w5;
 assign w6 = v381569;
 v15dcc6_vee177d vee177d (
  .reset(w0),
  .clk(w1),
  .Ch1(w2),
  .Ch2(w3),
  .Ch3(w4),
  .Ch4(w5),
  .InPPM_neg(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Deco_PPM_4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Decodificador PPM 4 bits
/*-------------------------------------------------*/

module v15dcc6_vee177d (
 input InPPM_neg,
 input reset,
 input clk,
 output Ch1,
 output Ch2,
 output Ch3,
 output Ch4
);
 
 parameter [2:0] S0=0,S1=1,S2=2,S3=3,S4=4;              //Poner nombres a los estados
 
 reg Ch1=0,Ch2=0,Ch3=0,Ch4=0;                           //Inicializo canales
 
 reg [2:0]  estadoActual=0, estadoNext=0;               //Inicializo estados
 
 // bloque secuencial. Capturar estado Actual
 
 always @(posedge clk )
 if(reset) estadoActual <= S0; 
 else estadoActual <= estadoNext;
 
 // Bloque combinacional. Calculamos estado siguiente y valor de las
 // salidas en función de las entradas y del estado actual.
 
 always @(reset or InPPM_neg or estadoActual)  //  estado siguiente = función ( entradas y estado actual)
 begin
   //valores por defecto. justo antes del case pongo valores por defecto y en el case solo cambiamos
   //la salida que se ve afectada y las demás tomarán los valores por defecto
   Ch1   = 0;
   Ch2   = 0;
   Ch3   = 0;
   Ch4   = 0;
   estadoNext   = S0; 
   
   case(estadoActual)  //Evaluación del estado actual
      S0:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S1;   Ch1 = 1'b1;   end 
         else                      estadoNext = S0;  
         end
      S1:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S2;   Ch2 = 1'b1;   end 
         else              begin   estadoNext = S1;   Ch1 = 1'b1;   end
         end
      S2:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S3;   Ch3 = 1'b1;   end 
         else              begin   estadoNext = S2;   Ch2 = 1'b1;   end
         end
      S3:begin                                   
         if( InPPM_neg  )  begin   estadoNext = S4;   Ch4 = 1'b1;   end 
         else              begin   estadoNext = S3;   Ch3 = 1'b1;   end
         end
      S4:begin                                   
         if( InPPM_neg  )          estadoNext = S0;
         else              begin   estadoNext = S4;   Ch4 = 1'b1;  end
         end
      default:                     estadoNext = S0;
    endcase
 end
endmodule
//---- Top entity
module v28cfaa (
 input vd7f8af,
 input v7e70ae,
 input vb186da,
 input v381ebf,
 input vc13c07,
 input v9b870f,
 output vc93bbe
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign vc93bbe = w0;
 assign w1 = v381ebf;
 assign w2 = vb186da;
 assign w3 = v7e70ae;
 assign w4 = vd7f8af;
 assign w5 = v9b870f;
 assign w6 = vc13c07;
 v28cfaa_ve4e0df ve4e0df (
  .o(w0),
  .i0(w1),
  .i1(w2),
  .i2(w3),
  .i3(w4),
  .s0(w5),
  .s1(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 4 a 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 4 a 1. Implementado en verilog
/*-------------------------------------------------*/

module v28cfaa_ve4e0df (
 input i3,
 input i2,
 input i1,
 input i0,
 input s1,
 input s0,
 output o
);
 wire [1:0] sel = {s1, s0};
 
 assign o = (sel == 2'b00) ? i0 :
            (sel == 2'b01) ? i1 :
            (sel == 2'b10) ? i2 : i3;
 
 
endmodule
//---- Top entity
module ve79148 #(
 parameter v5e4a03 = 4
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [1:0] vd76104,
 output v712cd1
);
 localparam p2 = v5e4a03;
 wire [0:1] w0;
 wire w1;
 wire w3;
 wire w4;
 wire w5;
 assign vd76104 = w0;
 assign w1 = ve61673;
 assign w3 = v7c533e;
 assign w4 = vdd729a;
 assign v712cd1 = w5;
 ve79148_vbd6086 #(
  .M(p2)
 ) vbd6086 (
  .q(w0),
  .rst(w1),
  .cnt(w3),
  .clk(w4),
  .ov(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-2bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 2 bits, con reset 
/*-------------------------------------------------*/

module ve79148_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [1:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 2; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module va9a5bc #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 va9a5bc_v6cac2f #(
  .SEC(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-Sec  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics a con periodo paramétrico de segundos
/*-------------------------------------------------*/

module va9a5bc_v6cac2f #(
 parameter SEC = 0
) (
 input clk,
 output o
);
 //localparam SEC;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEC;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule
//---- Top entity
module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 0
/*-------------------------------------------------*/

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule
//---- Top entity
module vfc9dac (
 input [1:0] v8b19dd,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign w2 = v8b19dd;
 vfc9dac_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Separador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 2-bits en dos cables
/*-------------------------------------------------*/

module vfc9dac_v9a2a06 (
 input [1:0] i,
 output o1,
 output o0
);
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module vbdf794 #(
 parameter v602fc8 = 100,
 parameter ve97d24 = 180,
 parameter v6c8394 = 181,
 parameter v7200b2 = 1,
 parameter v457f55 = 4,
 parameter v17e198 = 19,
 parameter v3949b9 = 22,
 parameter vd8a345 = 42,
 parameter ve4e838 = 45,
 parameter v8f4840 = 60,
 parameter v857277 = 83,
 parameter v8b9ed0 = 63,
 parameter v02ab25 = 86
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p24 = v602fc8;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 assign vbb19a2 = w30;
 assign w31 = v8e52a4;
 assign w13 = w12;
 assign w14 = w12;
 assign w14 = w13;
 assign w15 = w12;
 assign w15 = w13;
 assign w15 = w14;
 assign w16 = w12;
 assign w16 = w13;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w18;
 assign w21 = w19;
 assign w21 = w20;
 assign w22 = w18;
 assign w22 = w19;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w18;
 assign w23 = w19;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 assign w25 = w17;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vf8ab06(w12),
  .vd67ea4(w17),
  .v3f7fd6(w19)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vf8ab06(w13),
  .v3f7fd6(w20),
  .vd67ea4(w26)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vf8ab06(w14),
  .v3f7fd6(w21),
  .vd67ea4(w27)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vf8ab06(w15),
  .v3f7fd6(w22),
  .vd67ea4(w28)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vf8ab06(w16),
  .v3f7fd6(w23),
  .vd67ea4(w29)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vd67ea4(w12),
  .vf8ab06(w17),
  .v3f7fd6(w18)
 );
 vc33d80 #(
  .vfb06ae(p24)
 ) vdb264c (
  .v2a8434(w18),
  .vac0eb2(w31)
 );
 vbdf794_vd471d2 vd471d2 (
  .a(w25),
  .b(w26),
  .c(w27),
  .d(w28),
  .e(w29),
  .out(w30)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module vbdf794_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 output out
);
 
 
 assign out = a | b | c | d | e ;
 
 // OR DE 5 puertas
endmodule
//---- Top entity
module vc46d2e #(
 parameter vf3ca5f = 8,
 parameter v2b07d6 = 5,
 parameter v4dd05a = 20
) (
 input vf8ab06,
 input v3f7fd6,
 output vd67ea4
);
 localparam p7 = vf3ca5f;
 localparam p8 = vf3ca5f;
 localparam p9 = v4dd05a;
 localparam p10 = v2b07d6;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign vd67ea4 = w0;
 assign w2 = v3f7fd6;
 assign w3 = v3f7fd6;
 assign w5 = vf8ab06;
 assign w6 = vf8ab06;
 assign w3 = w2;
 assign w6 = w5;
 v161240 vb8f207 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w4)
 );
 v5b07d1 #(
  .vd71dc5(p8),
  .va1edee(p10)
 ) v44990b (
  .v19bd79(w1),
  .ve9fb46(w2),
  .v637c56(w5)
 );
 v5b3026 #(
  .vfd7c7d(p7),
  .va1edee(p9)
 ) vac72ef (
  .ve9fb46(w3),
  .v19bd79(w4),
  .vdb65bd(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Configurable Pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- We can configure a pulse (t_up and t_down )
/*-------------------------------------------------*/
//---- Top entity
module v161240 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v161240_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module v161240_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 assign c = a & b;
 
 
endmodule
//---- Top entity
module v5b07d1 #(
 parameter vd71dc5 = 8,
 parameter va1edee = 1
) (
 input v637c56,
 input ve9fb46,
 output v19bd79
);
 localparam p3 = vd71dc5;
 localparam p4 = va1edee;
 wire w0;
 wire w1;
 wire w2;
 assign v19bd79 = w0;
 assign w1 = ve9fb46;
 assign w2 = v637c56;
 v5b07d1_v8c8712 #(
  .n(p3),
  .to(p4)
 ) v8c8712 (
  .u(w0),
  .clk(w1),
  .reset(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- u(t)  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- u(t)  unitary step. Start in t
/*-------------------------------------------------*/

module v5b07d1_v8c8712 #(
 parameter n = 0,
 parameter to = 0
) (
 input reset,
 input clk,
 output u
);
 // Escalón u(t)
 // t ciclos de reloj a 0 y
 // cambia a 1.
 
 localparam num_bits=n-1;
 localparam num_periods=to;
 
 reg[num_bits:0] contador=0;
 reg u=1'b0;
 
 
 always @(posedge clk)
 if(reset) begin contador<=0; u<=1'b0; end
 else 
     begin
         if(contador >= num_periods-1)
          begin
              u <=1'b1;
              contador <= contador;
          end
         else
          begin
               u<=1'b0;
               contador<=contador+1;
          end
     end
  
  
  
  
endmodule
//---- Top entity
module v5b3026 #(
 parameter vfd7c7d = 8,
 parameter va1edee = 10
) (
 input vdb65bd,
 input ve9fb46,
 output v19bd79
);
 localparam p3 = vfd7c7d;
 localparam p4 = va1edee;
 wire w0;
 wire w1;
 wire w2;
 assign v19bd79 = w0;
 assign w1 = ve9fb46;
 assign w2 = vdb65bd;
 v5b3026_v8c8712 #(
  .n(p3),
  .to(p4)
 ) v8c8712 (
  .u(w0),
  .clk(w1),
  .reset(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- u(t)  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- u(t)  unitary step. Start in t
/*-------------------------------------------------*/

module v5b3026_v8c8712 #(
 parameter n = 0,
 parameter to = 0
) (
 input reset,
 input clk,
 output u
);
 // falling pulse in t
 // t ciclos de reloj a 1 y
 // cambia a 0.
 
 localparam num_bits=n-1;
 localparam num_periods=to;
 
 reg[num_bits:0] contador=0;
 reg u=1'b1;
 
 
 always @(posedge clk)
 if(reset)begin contador<=0; u<=1'b1; end
 else 
 begin
     if(contador >= num_periods-1)
      begin
          u <=1'b0;
          contador <= contador;
      end
     else
      begin
           u<=1'b1;
           contador<=contador+1;
      end
 end
  
  
  
  
endmodule
//---- Top entity
module vc33d80 #(
 parameter vfb06ae = 100
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vc33d80_v6cac2f #(
  .US(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-us  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics a con periodo paramétrico de microsegundos
/*-------------------------------------------------*/

module vc33d80_v6cac2f #(
 parameter US = 0
) (
 input clk,
 output o
);
 //localparam US;
 
 //-- Constante para dividir y obtener una frecuencia de 1MHz
 localparam M = 12*US;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule
//---- Top entity
module v54aa42 #(
 parameter v602fc8 = 100,
 parameter ve97d24 = 180,
 parameter v6c8394 = 181,
 parameter v7200b2 = 1,
 parameter v457f55 = 4,
 parameter v17e198 = 14,
 parameter v3949b9 = 17,
 parameter vd8a345 = 32,
 parameter ve4e838 = 35,
 parameter v8f4840 = 55,
 parameter v857277 = 68,
 parameter v8b9ed0 = 58,
 parameter v02ab25 = 71
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p24 = v602fc8;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 assign vbb19a2 = w30;
 assign w31 = v8e52a4;
 assign w13 = w12;
 assign w14 = w12;
 assign w14 = w13;
 assign w15 = w12;
 assign w15 = w13;
 assign w15 = w14;
 assign w16 = w12;
 assign w16 = w13;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w18;
 assign w21 = w19;
 assign w21 = w20;
 assign w22 = w18;
 assign w22 = w19;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w18;
 assign w23 = w19;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 assign w25 = w17;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vf8ab06(w12),
  .vd67ea4(w17),
  .v3f7fd6(w19)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vf8ab06(w13),
  .v3f7fd6(w20),
  .vd67ea4(w26)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vf8ab06(w14),
  .v3f7fd6(w21),
  .vd67ea4(w27)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vf8ab06(w15),
  .v3f7fd6(w22),
  .vd67ea4(w28)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vf8ab06(w16),
  .v3f7fd6(w23),
  .vd67ea4(w29)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vd67ea4(w12),
  .vf8ab06(w17),
  .v3f7fd6(w18)
 );
 vc33d80 #(
  .vfb06ae(p24)
 ) vdb264c (
  .v2a8434(w18),
  .vac0eb2(w31)
 );
 v54aa42_vd471d2 vd471d2 (
  .a(w25),
  .b(w26),
  .c(w27),
  .d(w28),
  .e(w29),
  .out(w30)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module v54aa42_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 output out
);
 
 
 assign out = a | b | c | d | e ;
 
 // OR DE 5 puertas
endmodule
//---- Top entity
module ve2a8d5 #(
 parameter v602fc8 = 100,
 parameter ve97d24 = 180,
 parameter v6c8394 = 181,
 parameter v7200b2 = 1,
 parameter v457f55 = 4,
 parameter v17e198 = 24,
 parameter v3949b9 = 27,
 parameter vd8a345 = 45,
 parameter ve4e838 = 48,
 parameter v8f4840 = 63,
 parameter v857277 = 86,
 parameter v8b9ed0 = 66,
 parameter v02ab25 = 89
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p24 = v602fc8;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 assign vbb19a2 = w30;
 assign w31 = v8e52a4;
 assign w13 = w12;
 assign w14 = w12;
 assign w14 = w13;
 assign w15 = w12;
 assign w15 = w13;
 assign w15 = w14;
 assign w16 = w12;
 assign w16 = w13;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w18;
 assign w21 = w19;
 assign w21 = w20;
 assign w22 = w18;
 assign w22 = w19;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w18;
 assign w23 = w19;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 assign w25 = w17;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vf8ab06(w12),
  .vd67ea4(w17),
  .v3f7fd6(w19)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vf8ab06(w13),
  .v3f7fd6(w20),
  .vd67ea4(w26)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vf8ab06(w14),
  .v3f7fd6(w21),
  .vd67ea4(w27)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vf8ab06(w15),
  .v3f7fd6(w22),
  .vd67ea4(w28)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vf8ab06(w16),
  .v3f7fd6(w23),
  .vd67ea4(w29)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vd67ea4(w12),
  .vf8ab06(w17),
  .v3f7fd6(w18)
 );
 vc33d80 #(
  .vfb06ae(p24)
 ) vdb264c (
  .v2a8434(w18),
  .vac0eb2(w31)
 );
 ve2a8d5_vd471d2 vd471d2 (
  .a(w25),
  .b(w26),
  .c(w27),
  .d(w28),
  .e(w29),
  .out(w30)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module ve2a8d5_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 output out
);
 
 
 assign out = a | b | c | d | e ;
 
 // OR DE 5 puertas
endmodule
//---- Top entity
module v6b5b6a #(
 parameter v602fc8 = 100,
 parameter ve97d24 = 180,
 parameter v6c8394 = 181,
 parameter v7200b2 = 1,
 parameter v457f55 = 4,
 parameter v17e198 = 14,
 parameter v3949b9 = 17,
 parameter vd8a345 = 27,
 parameter ve4e838 = 30,
 parameter v8f4840 = 40,
 parameter v857277 = 53,
 parameter v8b9ed0 = 43,
 parameter v02ab25 = 56
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p24 = v602fc8;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 assign vbb19a2 = w30;
 assign w31 = v8e52a4;
 assign w13 = w12;
 assign w14 = w12;
 assign w14 = w13;
 assign w15 = w12;
 assign w15 = w13;
 assign w15 = w14;
 assign w16 = w12;
 assign w16 = w13;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w18;
 assign w21 = w19;
 assign w21 = w20;
 assign w22 = w18;
 assign w22 = w19;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w18;
 assign w23 = w19;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 assign w25 = w17;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vf8ab06(w12),
  .vd67ea4(w17),
  .v3f7fd6(w19)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vf8ab06(w13),
  .v3f7fd6(w20),
  .vd67ea4(w26)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vf8ab06(w14),
  .v3f7fd6(w21),
  .vd67ea4(w27)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vf8ab06(w15),
  .v3f7fd6(w22),
  .vd67ea4(w28)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vf8ab06(w16),
  .v3f7fd6(w23),
  .vd67ea4(w29)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vd67ea4(w12),
  .vf8ab06(w17),
  .v3f7fd6(w18)
 );
 vc33d80 #(
  .vfb06ae(p24)
 ) vdb264c (
  .v2a8434(w18),
  .vac0eb2(w31)
 );
 v6b5b6a_vd471d2 vd471d2 (
  .a(w25),
  .b(w26),
  .c(w27),
  .d(w28),
  .e(w29),
  .out(w30)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module v6b5b6a_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 output out
);
 
 
 assign out = a | b | c | d | e ;
 
 // OR DE 5 puertas
endmodule
