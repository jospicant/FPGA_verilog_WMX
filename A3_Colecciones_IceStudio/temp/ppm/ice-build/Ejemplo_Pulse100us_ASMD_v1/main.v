// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input vd33bc4,
 input va0f1da,
 input vclk,
 output v8a2f5b,
 output v2d5e76,
 output [0:7] vinit
);
 wire [0:10] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign w4 = vd33bc4;
 assign w5 = va0f1da;
 assign v8a2f5b = w6;
 assign v2d5e76 = w7;
 assign w8 = vclk;
 assign w9 = vclk;
 assign w10 = vclk;
 assign w9 = w8;
 assign w10 = w8;
 assign w10 = w9;
 v31fc6b vef9835 (
  .v09a468(w0),
  .v678d18(w1),
  .v2e69c1(w2),
  .v826ea3(w3),
  .ve99f77(w5),
  .v5faa99(w6),
  .v1891e5(w7),
  .v30e6b7(w8)
 );
 va05cb9 v604a22 (
  .vee5817(w0),
  .v7c533e(w1),
  .ve61673(w2),
  .vdd729a(w9)
 );
 v2107ac vf547f3 (
  .v64879c(w3),
  .vd9601b(w4),
  .vbbbce8(w10)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v31fc6b (
 input [10:0] v09a468,
 input v826ea3,
 input ve99f77,
 input v30e6b7,
 output v5faa99,
 output v2e69c1,
 output v678d18,
 output v1891e5
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:10] w5;
 wire w6;
 wire w7;
 assign w0 = v826ea3;
 assign w1 = ve99f77;
 assign w2 = v30e6b7;
 assign v5faa99 = w3;
 assign v1891e5 = w4;
 assign w5 = v09a468;
 assign v2e69c1 = w6;
 assign v678d18 = w7;
 v31fc6b_v9c7674 v9c7674 (
  .Start(w0),
  .reset(w1),
  .clk(w2),
  .Pulse_100us(w3),
  .Fin(w4),
  .n(w5),
  .reset_n(w6),
  .inc_n(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- Maquina100us  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module v31fc6b_v9c7674 (
 input [10:0] n,
 input Start,
 input reset,
 input clk,
 output Pulse_100us,
 output reset_n,
 output inc_n,
 output Fin
);
 // cuando llega un tic por Start
 // Se genera un pulso de 100 microsegundos
 // y al terminar se genera un tic de fin del pulso  por "Fin"
 
 parameter      S0=1'b0, S1=1'b1;   // 2 estados inicio y contando/comparando
                                    // hasta 1200 conteos ( 100 us )
                                    
 reg Pulse_100us = 0, reset_n =0, inc_n =0, Fin = 0;
 reg estadoActual = 0, estadoSiguiente = 0;
 
 //bloque secuencial donde se asigna el estado Siguiente como el estado Actual ***************
 
 always @(posedge clk or posedge reset)
 begin
  if(reset)  estadoActual <= S0;
  else       estadoActual <= estadoSiguiente;
 end
 
 //bloque combinacional donde se calculan las salidas y los estados siguientes ***************
 
 always @(*)begin
 
 //valores por defecto que se aplican si no se indica nada en uno de los estados
 Pulse_100us = 0;
 reset_n     = 0;
 inc_n       = 0;
 Fin         = 0;
 
   case(estadoActual)
     S0:begin                   
          if(Start)             estadoSiguiente = S1;
          else                  estadoSiguiente = S0;
        end
     S1:begin                   //Pulse_100us = 1 mientras esté en este estado
                                                         Pulse_100us = 1'b1; 
          if(n == 1200) begin   estadoSiguiente = S0;    Fin         = 1;  reset_n = 1;    end  // Pulse_100us = 1  n = 0 Fin = 1 
          else          begin   estadoSiguiente = S1;    inc_n = 1;                        end  // Pulse_100us = 1  n=n+1 Fin = 0     
        end
     default:                   estadoSiguiente = S0;                              // Pulse_100us = 0  n = 0 Fin = 0
   endcase
 end
 
 
                              
 
endmodule
//---- Top entity
module va05cb9 #(
 parameter v5e4a03 = 2048
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [10:0] vee5817,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:10] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vee5817 = w5;
 va05cb9_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-11bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 11 bits, con reset 
/*-------------------------------------------------*/

module va05cb9_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [10:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 11; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 0;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module v2107ac (
 input vbbbce8,
 input vd9601b,
 output v157a67,
 output v64879c
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = vd9601b;
 assign v64879c = w1;
 assign w2 = vbbbce8;
 assign v157a67 = w3;
 v2107ac_v297cb2 v297cb2 (
  .d(w0),
  .tic(w1),
  .clk(w2),
  .state(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Pulsador-tic  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador
/*-------------------------------------------------*/

module v2107ac_v297cb2 (
 input clk,
 input d,
 output state,
 output tic
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d2;
 reg r_in;
 
 always @(posedge clk)
  d2 <= d;
  
 always @(posedge clk)
   r_in <= d2;
 
 
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ r_in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= r_in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 //-- Generar tic en flanco de subida del boton
 reg old;
 
 always @(posedge clk)
   old <= btn_out_r;
   
 assign tic = !old & btn_out_r;
 
 //-- El estado del pulsador se saca por state
 assign state = btn_out_r;
 
 
endmodule
