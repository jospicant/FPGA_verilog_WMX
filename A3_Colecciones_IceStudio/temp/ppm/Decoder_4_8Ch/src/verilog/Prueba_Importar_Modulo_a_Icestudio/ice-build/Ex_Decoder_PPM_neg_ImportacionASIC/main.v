// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main #(
 parameter vd1c37d = 4
) (
 input v841316,
 input vclk,
 output v4df5ff,
 output v20658b,
 output v08c24f,
 output vd8d171,
 output va77672,
 output v3e4296,
 output v6e5026,
 output vdb86a5,
 output [0:7] vinit
);
 localparam p4 = vd1c37d;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 assign vd8d171 = w5;
 assign va77672 = w6;
 assign v3e4296 = w7;
 assign v6e5026 = w8;
 assign vdb86a5 = w9;
 assign v08c24f = w10;
 assign v20658b = w11;
 assign v4df5ff = w12;
 assign w13 = v841316;
 assign w15 = vclk;
 assign w16 = vclk;
 assign w17 = vclk;
 assign w18 = vclk;
 assign w16 = w15;
 assign w17 = w15;
 assign w17 = w16;
 assign w18 = w15;
 assign w18 = w16;
 assign w18 = w17;
 v35f267 v51804b (
  .v0e28cb(w2),
  .vcbab45(w14)
 );
 v5cc6ec va7d98c (
  .vb186da(w0),
  .v381ebf(w1),
  .vc93bbe(w2),
  .v50d6c6(w3)
 );
 v5b3e69 #(
  .v207e0d(p4)
 ) vbbc45a (
  .v8337bc(w3),
  .v531e20(w15)
 );
 v1049af va91276 (
  .vbb19a2(w1),
  .v8e52a4(w16)
 );
 v1f6f60 ve7693e (
  .vbb19a2(w0),
  .v8e52a4(w17)
 );
 vd00bc0 v51ad2b (
  .v0b7996(w5),
  .v20d1ea(w6),
  .v631b76(w7),
  .vfa6868(w8),
  .v27382b(w9),
  .v813582(w10),
  .v032f70(w11),
  .v446f52(w12),
  .v59b691(w13),
  .v189fe9(w14),
  .vbd2a31(w18)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module v5cc6ec (
 input vb186da,
 input v381ebf,
 input v50d6c6,
 output vc93bbe
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v50d6c6;
 assign vc93bbe = w1;
 assign w2 = v381ebf;
 assign w3 = vb186da;
 v5cc6ec_ve4e0df ve4e0df (
  .sel(w0),
  .o(w1),
  .i0(w2),
  .i1(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1
/*-------------------------------------------------*/

module v5cc6ec_ve4e0df (
 input i1,
 input i0,
 input sel,
 output o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg _o;
 
 always @(*) begin
     case(sel)
         0: _o = i0;
         1: _o = i1;
         default: _o = i0;
     endcase
 end
 
 assign o = _o;
 
endmodule
//---- Top entity
module v5b3e69 #(
 parameter v207e0d = 1
) (
 input v531e20,
 output v8337bc
);
 localparam p2 = v207e0d;
 wire w0;
 wire w1;
 assign v8337bc = w0;
 assign w1 = v531e20;
 v5b3e69_v94c6d7 #(
  .SEG(p2)
 ) v94c6d7 (
  .clk_o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon_Seg  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Bombear 1 bit con el periodo especificado en el par√°metro. Por defecto el periodo es de 1 segundos
/*-------------------------------------------------*/

module v5b3e69_v94c6d7 #(
 parameter SEG = 0
) (
 input clk,
 output clk_o
);
 
 //parameter HZ=1;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEG;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 //-- Temporal clock
 reg clk_t = 0;
 
 //-- Se usa un contador modulo M/2 para luego
 //-- pasarlo por un biestable T y dividir la frecuencia
 //-- entre 2, para que el ciclo de trabajo sea del 50%
 always @(posedge clk)
     if (divcounter == M/2) begin
       clk_t <= 1;
       divcounter = 0;
     end 
     else begin
       divcounter <=  divcounter + 1;
       clk_t = 0;
     end 
   
 reg clk_o = 0;  
     
 //-- Biestable T para obtener ciclo de trabajo del 50%
 always @(posedge clk)
   if (clk_t)
     clk_o <= ~clk_o;
 
endmodule
//---- Top entity
module v1049af #(
 parameter v602fc8 = 100,
 parameter vb957bd = 105,
 parameter v857277 = 53,
 parameter v7200b2 = 1,
 parameter v1814d6 = 108,
 parameter v02ab25 = 56,
 parameter v457f55 = 4,
 parameter v115b07 = 66,
 parameter ve97d24 = 240,
 parameter v17e198 = 14,
 parameter v240c71 = 69,
 parameter v6c8394 = 241,
 parameter v3949b9 = 17,
 parameter v656e4c = 79,
 parameter vd8a345 = 27,
 parameter v882fe8 = 82,
 parameter ve4e838 = 30,
 parameter v8269c0 = 92,
 parameter v8f4840 = 40,
 parameter vcabc4d = 95,
 parameter v8b9ed0 = 43
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p12 = v602fc8;
 localparam p15 = v115b07;
 localparam p16 = v240c71;
 localparam p17 = v656e4c;
 localparam p18 = v882fe8;
 localparam p19 = v8269c0;
 localparam p20 = vcabc4d;
 localparam p21 = vb957bd;
 localparam p22 = v1814d6;
 wire w13;
 wire w14;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire w48;
 wire w49;
 wire w50;
 wire w51;
 assign vbb19a2 = w13;
 assign w14 = v8e52a4;
 assign w32 = w26;
 assign w34 = w33;
 assign w35 = w33;
 assign w35 = w34;
 assign w36 = w33;
 assign w36 = w34;
 assign w36 = w35;
 assign w37 = w33;
 assign w37 = w34;
 assign w37 = w35;
 assign w37 = w36;
 assign w38 = w33;
 assign w38 = w34;
 assign w38 = w35;
 assign w38 = w36;
 assign w38 = w37;
 assign w39 = w33;
 assign w39 = w34;
 assign w39 = w35;
 assign w39 = w36;
 assign w39 = w37;
 assign w39 = w38;
 assign w40 = w33;
 assign w40 = w34;
 assign w40 = w35;
 assign w40 = w36;
 assign w40 = w37;
 assign w40 = w38;
 assign w40 = w39;
 assign w41 = w33;
 assign w41 = w34;
 assign w41 = w35;
 assign w41 = w36;
 assign w41 = w37;
 assign w41 = w38;
 assign w41 = w39;
 assign w41 = w40;
 assign w43 = w42;
 assign w44 = w42;
 assign w44 = w43;
 assign w45 = w42;
 assign w45 = w43;
 assign w45 = w44;
 assign w46 = w42;
 assign w46 = w43;
 assign w46 = w44;
 assign w46 = w45;
 assign w47 = w42;
 assign w47 = w43;
 assign w47 = w44;
 assign w47 = w45;
 assign w47 = w46;
 assign w48 = w42;
 assign w48 = w43;
 assign w48 = w44;
 assign w48 = w45;
 assign w48 = w46;
 assign w48 = w47;
 assign w49 = w42;
 assign w49 = w43;
 assign w49 = w44;
 assign w49 = w45;
 assign w49 = w46;
 assign w49 = w47;
 assign w49 = w48;
 assign w50 = w42;
 assign w50 = w43;
 assign w50 = w44;
 assign w50 = w45;
 assign w50 = w46;
 assign w50 = w47;
 assign w50 = w48;
 assign w50 = w49;
 assign w51 = w42;
 assign w51 = w43;
 assign w51 = w44;
 assign w51 = w45;
 assign w51 = w46;
 assign w51 = w47;
 assign w51 = w48;
 assign w51 = w49;
 assign w51 = w50;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vd67ea4(w26),
  .vf8ab06(w36),
  .v3f7fd6(w46)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vd67ea4(w25),
  .vf8ab06(w35),
  .v3f7fd6(w45)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vd67ea4(w24),
  .vf8ab06(w34),
  .v3f7fd6(w44)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vd67ea4(w23),
  .vf8ab06(w33),
  .v3f7fd6(w43)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vd67ea4(w30),
  .vf8ab06(w40),
  .v3f7fd6(w50)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vf8ab06(w32),
  .vd67ea4(w33),
  .v3f7fd6(w42)
 );
 vc33d80 #(
  .vfb06ae(p12)
 ) vdb264c (
  .vac0eb2(w14),
  .v2a8434(w42)
 );
 vc46d2e #(
  .v2b07d6(p15),
  .v4dd05a(p16)
 ) v055a75 (
  .vd67ea4(w29),
  .vf8ab06(w37),
  .v3f7fd6(w47)
 );
 vc46d2e #(
  .v2b07d6(p17),
  .v4dd05a(p18)
 ) v7ed282 (
  .vd67ea4(w28),
  .vf8ab06(w38),
  .v3f7fd6(w48)
 );
 vc46d2e #(
  .v2b07d6(p19),
  .v4dd05a(p20)
 ) vfdf311 (
  .vd67ea4(w27),
  .vf8ab06(w39),
  .v3f7fd6(w49)
 );
 vc46d2e #(
  .v2b07d6(p21),
  .v4dd05a(p22)
 ) v6b6712 (
  .vd67ea4(w31),
  .vf8ab06(w41),
  .v3f7fd6(w51)
 );
 v1049af_vd471d2 vd471d2 (
  .out(w13),
  .a(w23),
  .b(w24),
  .c(w25),
  .d(w26),
  .e(w27),
  .f(w28),
  .g(w29),
  .h(w30),
  .i(w31)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse01  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module v1049af_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 input f,
 input g,
 input h,
 input i,
 output out
);
 
 
 assign out = a | b | c | d | e | f | g | h | i ;
 
 // OR DE 9 puertas
endmodule
//---- Top entity
module vc46d2e #(
 parameter vf3ca5f = 8,
 parameter v2b07d6 = 5,
 parameter v4dd05a = 20
) (
 input vf8ab06,
 input v3f7fd6,
 output vd67ea4
);
 localparam p7 = vf3ca5f;
 localparam p8 = vf3ca5f;
 localparam p9 = v4dd05a;
 localparam p10 = v2b07d6;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign vd67ea4 = w0;
 assign w2 = v3f7fd6;
 assign w3 = v3f7fd6;
 assign w5 = vf8ab06;
 assign w6 = vf8ab06;
 assign w3 = w2;
 assign w6 = w5;
 v161240 vb8f207 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w4)
 );
 v5b07d1 #(
  .vd71dc5(p8),
  .va1edee(p10)
 ) v44990b (
  .v19bd79(w1),
  .ve9fb46(w2),
  .v637c56(w5)
 );
 v5b3026 #(
  .vfd7c7d(p7),
  .va1edee(p9)
 ) vac72ef (
  .ve9fb46(w3),
  .v19bd79(w4),
  .vdb65bd(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Configurable Pulse  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- We can configure a pulse (t_up and t_down )
/*-------------------------------------------------*/
//---- Top entity
module v161240 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v161240_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module v161240_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 assign c = a & b;
 
 
endmodule
//---- Top entity
module v5b07d1 #(
 parameter vd71dc5 = 8,
 parameter va1edee = 1
) (
 input v637c56,
 input ve9fb46,
 output v19bd79
);
 localparam p3 = vd71dc5;
 localparam p4 = va1edee;
 wire w0;
 wire w1;
 wire w2;
 assign v19bd79 = w0;
 assign w1 = ve9fb46;
 assign w2 = v637c56;
 v5b07d1_v8c8712 #(
  .n(p3),
  .to(p4)
 ) v8c8712 (
  .u(w0),
  .clk(w1),
  .reset(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- u(t)  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- u(t)  unitary step. Start in t
/*-------------------------------------------------*/

module v5b07d1_v8c8712 #(
 parameter n = 0,
 parameter to = 0
) (
 input reset,
 input clk,
 output u
);
 // Escal√≥n u(t)
 // t ciclos de reloj a 0 y
 // cambia a 1.
 
 localparam num_bits=n-1;
 localparam num_periods=to;
 
 reg[num_bits:0] contador=0;
 reg u=1'b0;
 
 
 always @(posedge clk)
 if(reset) begin contador<=0; u<=1'b0; end
 else 
     begin
         if(contador >= num_periods-1)
          begin
              u <=1'b1;
              contador <= contador;
          end
         else
          begin
               u<=1'b0;
               contador<=contador+1;
          end
     end
  
  
  
  
endmodule
//---- Top entity
module v5b3026 #(
 parameter vfd7c7d = 8,
 parameter va1edee = 10
) (
 input vdb65bd,
 input ve9fb46,
 output v19bd79
);
 localparam p3 = vfd7c7d;
 localparam p4 = va1edee;
 wire w0;
 wire w1;
 wire w2;
 assign v19bd79 = w0;
 assign w1 = ve9fb46;
 assign w2 = vdb65bd;
 v5b3026_v8c8712 #(
  .n(p3),
  .to(p4)
 ) v8c8712 (
  .u(w0),
  .clk(w1),
  .reset(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- u(t)  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- u(t)  unitary step. Start in t
/*-------------------------------------------------*/

module v5b3026_v8c8712 #(
 parameter n = 0,
 parameter to = 0
) (
 input reset,
 input clk,
 output u
);
 // falling pulse in t
 // t ciclos de reloj a 1 y
 // cambia a 0.
 
 localparam num_bits=n-1;
 localparam num_periods=to;
 
 reg[num_bits:0] contador=0;
 reg u=1'b1;
 
 
 always @(posedge clk)
 if(reset)begin contador<=0; u<=1'b1; end
 else 
 begin
     if(contador >= num_periods-1)
      begin
          u <=1'b0;
          contador <= contador;
      end
     else
      begin
           u<=1'b1;
           contador<=contador+1;
      end
 end
  
  
  
  
endmodule
//---- Top entity
module vc33d80 #(
 parameter vfb06ae = 100
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vc33d80_v6cac2f #(
  .US(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-us  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Coraz√≥n de bombeo de tics a con periodo param√©trico de microsegundos
/*-------------------------------------------------*/

module vc33d80_v6cac2f #(
 parameter US = 0
) (
 input clk,
 output o
);
 //localparam US;
 
 //-- Constante para dividir y obtener una frecuencia de 1MHz
 localparam M = 12*US;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la se√±al de overflow
 assign o = reset;
 
 
 
 
endmodule
//---- Top entity
module v1f6f60 #(
 parameter v602fc8 = 100,
 parameter vb957bd = 173,
 parameter v857277 = 79,
 parameter v7200b2 = 1,
 parameter v1814d6 = 176,
 parameter v02ab25 = 82,
 parameter v457f55 = 4,
 parameter v115b07 = 101,
 parameter ve97d24 = 240,
 parameter v17e198 = 19,
 parameter v240c71 = 104,
 parameter v6c8394 = 241,
 parameter v3949b9 = 22,
 parameter v656e4c = 124,
 parameter vd8a345 = 38,
 parameter v882fe8 = 127,
 parameter ve4e838 = 41,
 parameter v8269c0 = 148,
 parameter v8f4840 = 58,
 parameter vcabc4d = 151,
 parameter v8b9ed0 = 61
) (
 input v8e52a4,
 output vbb19a2
);
 localparam p0 = v7200b2;
 localparam p1 = v457f55;
 localparam p2 = v17e198;
 localparam p3 = v3949b9;
 localparam p4 = vd8a345;
 localparam p5 = ve4e838;
 localparam p6 = v8f4840;
 localparam p7 = v8b9ed0;
 localparam p8 = v857277;
 localparam p9 = v02ab25;
 localparam p10 = ve97d24;
 localparam p11 = v6c8394;
 localparam p12 = v602fc8;
 localparam p15 = v115b07;
 localparam p16 = v240c71;
 localparam p17 = v656e4c;
 localparam p18 = v882fe8;
 localparam p19 = v8269c0;
 localparam p20 = vcabc4d;
 localparam p21 = vb957bd;
 localparam p22 = v1814d6;
 wire w13;
 wire w14;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire w48;
 wire w49;
 wire w50;
 wire w51;
 assign vbb19a2 = w13;
 assign w14 = v8e52a4;
 assign w32 = w26;
 assign w34 = w33;
 assign w35 = w33;
 assign w35 = w34;
 assign w36 = w33;
 assign w36 = w34;
 assign w36 = w35;
 assign w37 = w33;
 assign w37 = w34;
 assign w37 = w35;
 assign w37 = w36;
 assign w38 = w33;
 assign w38 = w34;
 assign w38 = w35;
 assign w38 = w36;
 assign w38 = w37;
 assign w39 = w33;
 assign w39 = w34;
 assign w39 = w35;
 assign w39 = w36;
 assign w39 = w37;
 assign w39 = w38;
 assign w40 = w33;
 assign w40 = w34;
 assign w40 = w35;
 assign w40 = w36;
 assign w40 = w37;
 assign w40 = w38;
 assign w40 = w39;
 assign w41 = w33;
 assign w41 = w34;
 assign w41 = w35;
 assign w41 = w36;
 assign w41 = w37;
 assign w41 = w38;
 assign w41 = w39;
 assign w41 = w40;
 assign w43 = w42;
 assign w44 = w42;
 assign w44 = w43;
 assign w45 = w42;
 assign w45 = w43;
 assign w45 = w44;
 assign w46 = w42;
 assign w46 = w43;
 assign w46 = w44;
 assign w46 = w45;
 assign w47 = w42;
 assign w47 = w43;
 assign w47 = w44;
 assign w47 = w45;
 assign w47 = w46;
 assign w48 = w42;
 assign w48 = w43;
 assign w48 = w44;
 assign w48 = w45;
 assign w48 = w46;
 assign w48 = w47;
 assign w49 = w42;
 assign w49 = w43;
 assign w49 = w44;
 assign w49 = w45;
 assign w49 = w46;
 assign w49 = w47;
 assign w49 = w48;
 assign w50 = w42;
 assign w50 = w43;
 assign w50 = w44;
 assign w50 = w45;
 assign w50 = w46;
 assign w50 = w47;
 assign w50 = w48;
 assign w50 = w49;
 assign w51 = w42;
 assign w51 = w43;
 assign w51 = w44;
 assign w51 = w45;
 assign w51 = w46;
 assign w51 = w47;
 assign w51 = w48;
 assign w51 = w49;
 assign w51 = w50;
 vc46d2e #(
  .v2b07d6(p0),
  .v4dd05a(p1)
 ) vc96e1c (
  .vd67ea4(w26),
  .vf8ab06(w36),
  .v3f7fd6(w46)
 );
 vc46d2e #(
  .v2b07d6(p2),
  .v4dd05a(p3)
 ) vd706cc (
  .vd67ea4(w25),
  .vf8ab06(w35),
  .v3f7fd6(w45)
 );
 vc46d2e #(
  .v2b07d6(p4),
  .v4dd05a(p5)
 ) vf919f8 (
  .vd67ea4(w24),
  .vf8ab06(w34),
  .v3f7fd6(w44)
 );
 vc46d2e #(
  .v2b07d6(p6),
  .v4dd05a(p7)
 ) v434f33 (
  .vd67ea4(w23),
  .vf8ab06(w33),
  .v3f7fd6(w43)
 );
 vc46d2e #(
  .v2b07d6(p8),
  .v4dd05a(p9)
 ) vdf3c46 (
  .vd67ea4(w30),
  .vf8ab06(w40),
  .v3f7fd6(w50)
 );
 vc46d2e #(
  .v2b07d6(p10),
  .v4dd05a(p11)
 ) v0b750b (
  .vf8ab06(w32),
  .vd67ea4(w33),
  .v3f7fd6(w42)
 );
 vc33d80 #(
  .vfb06ae(p12)
 ) vdb264c (
  .vac0eb2(w14),
  .v2a8434(w42)
 );
 vc46d2e #(
  .v2b07d6(p15),
  .v4dd05a(p16)
 ) v055a75 (
  .vd67ea4(w29),
  .vf8ab06(w37),
  .v3f7fd6(w47)
 );
 vc46d2e #(
  .v2b07d6(p17),
  .v4dd05a(p18)
 ) v7ed282 (
  .vd67ea4(w28),
  .vf8ab06(w38),
  .v3f7fd6(w48)
 );
 vc46d2e #(
  .v2b07d6(p19),
  .v4dd05a(p20)
 ) vfdf311 (
  .vd67ea4(w27),
  .vf8ab06(w39),
  .v3f7fd6(w49)
 );
 vc46d2e #(
  .v2b07d6(p21),
  .v4dd05a(p22)
 ) v6b6712 (
  .vd67ea4(w31),
  .vf8ab06(w41),
  .v3f7fd6(w51)
 );
 v1f6f60_vd471d2 vd471d2 (
  .out(w13),
  .a(w23),
  .b(w24),
  .c(w25),
  .d(w26),
  .e(w27),
  .f(w28),
  .g(w29),
  .h(w30),
  .i(w31)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_pulse03  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsos PPM
/*-------------------------------------------------*/

module v1f6f60_vd471d2 (
 input a,
 input b,
 input c,
 input d,
 input e,
 input f,
 input g,
 input h,
 input i,
 output out
);
 
 
 assign out = a | b | c | d | e | f | g | h | i ;
 
 // OR DE 9 puertas
endmodule
//---- Top entity
module vd00bc0 (
 input v189fe9,
 input v59b691,
 input vbd2a31,
 output v446f52,
 output v032f70,
 output v813582,
 output v0b7996,
 output v20d1ea,
 output v631b76,
 output vfa6868,
 output v27382b
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign v446f52 = w0;
 assign v032f70 = w1;
 assign v813582 = w2;
 assign v0b7996 = w3;
 assign v20d1ea = w4;
 assign v631b76 = w5;
 assign vfa6868 = w6;
 assign v27382b = w7;
 assign w8 = v189fe9;
 assign w9 = vbd2a31;
 assign w10 = v59b691;
 vd00bc0_vafeddf vafeddf (
  .Ch1(w0),
  .Ch2(w1),
  .Ch3(w2),
  .Ch4(w3),
  .Ch5(w4),
  .Ch6(w5),
  .Ch7(w6),
  .Ch8(w7),
  .PPM_inv(w8),
  .clk(w9),
  .reset(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- PPM_8Asic  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- M√≥dulo exportado he importado con include tras modificar unos pocos detalles
/*-------------------------------------------------*/

module vd00bc0_vafeddf (
 input PPM_inv,
 input reset,
 input clk,
 output Ch1,
 output Ch2,
 output Ch3,
 output Ch4,
 output Ch5,
 output Ch6,
 output Ch7,
 output Ch8
);
 
 //@include Module_Decoder_8bits_ASIC.v
 
 DecoderPPM8 MyDecoderPPM_8(.v35fe10(PPM_inv),.v85e55a(reset), .v357ff7(clk),
                .v980ce1(Ch1), .v5ad277(Ch2), .v9c8ff5(Ch3),
                .v755ffa(Ch4), .v9653af(Ch5), .vc74257(Ch6),
                .vd84530(Ch7), .va741a7(Ch8));
                
endmodule
