// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input vff8479,
 input vclk,
 output v8d82f0,
 output v58d645,
 output v7d2397,
 output [0:7] vinit
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire [0:1] w6;
 wire w7;
 wire w8;
 assign v58d645 = w0;
 assign v7d2397 = w1;
 assign v8d82f0 = w2;
 assign w3 = vff8479;
 assign w7 = vclk;
 assign w8 = vclk;
 assign w8 = w7;
 v0851e7 v3f0b48 (
  .vb80e1b(w2),
  .v4dc7fc(w3),
  .vfe18cf(w4),
  .v2fc012(w5),
  .v7b11d4(w6),
  .vfd9fa9(w7)
 );
 main_vb35f32 vb35f32 (
  .PPM(w0),
  .PPM_I(w1),
  .CH1(w4),
  .Start(w5),
  .Selector(w6),
  .clk(w8)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v0851e7 #(
 parameter v405b24 = "v405b24.list",
 parameter v5d1cd2 = 3,
 parameter v8fc4bd = 1,
 parameter v2c5934 = "v2c5934.list",
 parameter v23caaf = 7'h48
) (
 input vfd9fa9,
 input v4dc7fc,
 input [1:0] v7b11d4,
 input v2fc012,
 output vb80e1b,
 output [7:0] vfe18cf,
 output v8ec998
);
 localparam p1 = v23caaf;
 localparam p9 = v2c5934;
 localparam p12 = v5d1cd2;
 localparam p27 = v8fc4bd;
 localparam p33 = v405b24;
 wire [0:7] w0;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire [0:6] w7;
 wire [0:1] w8;
 wire w10;
 wire w11;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire [0:17] w24;
 wire [0:2] w25;
 wire [0:2] w26;
 wire w28;
 wire [0:7] w29;
 wire [0:7] w30;
 wire [0:7] w31;
 wire [0:1] w32;
 wire [0:7] w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 assign vfe18cf = w0;
 assign w2 = v4dc7fc;
 assign vb80e1b = w3;
 assign w32 = v7b11d4;
 assign w35 = v2fc012;
 assign w36 = vfd9fa9;
 assign w37 = vfd9fa9;
 assign w38 = vfd9fa9;
 assign w39 = vfd9fa9;
 assign w40 = vfd9fa9;
 assign w41 = vfd9fa9;
 assign w42 = vfd9fa9;
 assign w44 = vfd9fa9;
 assign v8ec998 = w45;
 assign w10 = w6;
 assign w14 = w6;
 assign w14 = w10;
 assign w20 = w6;
 assign w20 = w10;
 assign w20 = w14;
 assign w21 = w15;
 assign w26 = w25;
 assign w37 = w36;
 assign w38 = w36;
 assign w38 = w37;
 assign w39 = w36;
 assign w39 = w37;
 assign w39 = w38;
 assign w40 = w36;
 assign w40 = w37;
 assign w40 = w38;
 assign w40 = w39;
 assign w41 = w36;
 assign w41 = w37;
 assign w41 = w38;
 assign w41 = w39;
 assign w41 = w40;
 assign w42 = w36;
 assign w42 = w37;
 assign w42 = w38;
 assign w42 = w39;
 assign w42 = w40;
 assign w42 = w41;
 assign w43 = w6;
 assign w43 = w10;
 assign w43 = w14;
 assign w43 = w20;
 assign w44 = w36;
 assign w44 = w37;
 assign w44 = w38;
 assign w44 = w39;
 assign w44 = w40;
 assign w44 = w41;
 assign w44 = w42;
 v89d234 v405ffe (
  .vb1c024(w0),
  .v39f831(w4),
  .vf892a0(w5),
  .v41eb95(w40)
 );
 v20b7db #(
  .vc5c8ea(p1)
 ) v38893d (
  .ve8dbeb(w7)
 );
 vb959c2 v270923 (
  .vb4c770(w6),
  .v3c6908(w16),
  .ve68648(w35),
  .v581b48(w37)
 );
 v8e2728 v0dff61 (
  .v10eedb(w6),
  .v2dffca(w11),
  .v0884a0(w38)
 );
 v1535f6 #(
  .vb36a78(p9)
 ) vcccfb9 (
  .vfde47f(w24),
  .v851180(w25)
 );
 v0851e7_v67db2c v67db2c (
  .op(w8),
  .i(w24),
  .value(w29),
  .regis(w30)
 );
 v117a33 #(
  .v5e4a03(p12)
 ) vf3a196 (
  .v712cd1(w16),
  .ve61673(w18),
  .v7c533e(w19),
  .vf4a676(w25),
  .vdd729a(w36)
 );
 v35f267 vf0c8f5 (
  .v0e28cb(w10),
  .vcbab45(w18)
 );
 v816138 v8221b9 (
  .v0e28cb(w11),
  .vcbab45(w13),
  .v3ca442(w23)
 );
 vb2090f vcfae5c (
  .v0e28cb(w14),
  .vcbab45(w19),
  .v3ca442(w21)
 );
 vb2090f v925465 (
  .v3ca442(w13),
  .vcbab45(w17),
  .v0e28cb(w20)
 );
 v1c7dae v4c83c4 (
  .vf54559(w15),
  .ve8318d(w22),
  .va4102a(w41)
 );
 v2b2787 v3716a6 (
  .v4dc7fc(w2),
  .vb80e1b(w3),
  .vfe18cf(w4),
  .v17d400(w5),
  .v329779(w7),
  .vc5c3a8(w8),
  .v122bbd(w15),
  .v54a38c(w17),
  .v8d0637(w29),
  .v64d54b(w31),
  .v6fc728(w39)
 );
 v1c7dae vbe08ed (
  .vf54559(w22),
  .ve8318d(w23),
  .va4102a(w42)
 );
 v359a55 v279edf (
  .v50d6c6(w28),
  .vd6b984(w30),
  .vf24dba(w31),
  .v02d898(w34)
 );
 vd9a3cf #(
  .v16d6b8(p27)
 ) v010bba (
  .v2e7398(w26),
  .v18e78c(w28)
 );
 vfbbede #(
  .vb36a78(p33)
 ) v4494aa (
  .v851180(w32),
  .vfde47f(w34)
 );
 v7eacdf v1041a6 (
  .v10eedb(w43),
  .v0884a0(w44),
  .v2dffca(w45)
 );
endmodule

/*-------------------------------------------------*/
/*-- adc  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Analog-to-digital-converter
/*-------------------------------------------------*/

module v0851e7_v67db2c (
 input [17:0] i,
 output [7:0] regis,
 output [7:0] value,
 output [1:0] op
);
 assign op = i[17:16];
 assign regis = i[15:8];
 assign value = i[7:0];
endmodule
//---- Top entity
module v89d234 #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input [7:0] v39f831,
 input vf892a0,
 output [7:0] vb1c024
);
 localparam p0 = v422d28;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w4;
 assign vb1c024 = w1;
 assign w2 = v39f831;
 assign w3 = vf892a0;
 assign w4 = v41eb95;
 v89d234_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .q(w1),
  .d(w2),
  .load(w3),
  .clk(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 8 bits
/*-------------------------------------------------*/

module v89d234_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input [7:0] d,
 input load,
 output [7:0] q
);
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
endmodule
//---- Top entity
module v20b7db #(
 parameter vc5c8ea = 0
) (
 output [6:0] ve8dbeb
);
 localparam p0 = vc5c8ea;
 wire [0:6] w1;
 assign ve8dbeb = w1;
 v20b7db_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-7bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0
/*-------------------------------------------------*/

module v20b7db_v465065 #(
 parameter VALUE = 0
) (
 output [6:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module vb959c2 #(
 parameter v679341 = 0
) (
 input v581b48,
 input ve68648,
 input v3c6908,
 output vb4c770
);
 localparam p4 = v679341;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v581b48;
 assign w1 = ve68648;
 assign w2 = v3c6908;
 assign vb4c770 = w3;
 vb959c2_v4e11b3 #(
  .INI(p4)
 ) v4e11b3 (
  .clk(w0),
  .set(w1),
  .rst(w2),
  .q(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-Set-Reset  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos
/*-------------------------------------------------*/

module vb959c2_v4e11b3 #(
 parameter INI = 0
) (
 input clk,
 input set,
 input rst,
 output q
);
 reg q = INI;
 
 always @(posedge clk)
   if (set)
     q <= 1'b1;
   else if (rst)
     q<=1'b0;
endmodule
//---- Top entity
module v8e2728 (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v8e2728_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Subida  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente
/*-------------------------------------------------*/

module v8e2728_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (~q & i);  
endmodule
//---- Top entity
module v1535f6 #(
 parameter vb36a78 = "vb36a78.list"
) (
 input [2:0] v851180,
 output [17:0] vfde47f
);
 localparam p0 = vb36a78;
 wire [0:2] w1;
 wire [0:17] w2;
 assign w1 = v851180;
 assign vfde47f = w2;
 v1535f6_v361fe9 #(
  .DATA(p0)
 ) v361fe9 (
  .i(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- mi-tabla3-18  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Circuito combinacional de 3 entradas y 18 salidas
/*-------------------------------------------------*/

module v1535f6_v361fe9 #(
 parameter DATA = 0
) (
 input [2:0] i,
 output [17:0] q
);
 
 //-- Bits del bus de entrada
 localparam N = 3;
 
 //-- Bits del bus de salida
 localparam M = 18;
 
 //-- Calcular tamaño de la tabla
 //-- (filas) segun los bits de entrada
 localparam TAM = 2 ** N;
 
 //-- Definición de la tabla
 //-- Tabla de TAM elementos de M bits
 reg [M-1:0] tabla[0:TAM-1];
 
 //-- Read the table
 assign q = tabla[i];
 
 //-- Init table from DATA parameters
 initial begin
   if (DATA) $readmemh(DATA, tabla);
 end
endmodule
//---- Top entity
module v117a33 #(
 parameter v5e4a03 = 8
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [2:0] vf4a676,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:2] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vf4a676 = w5;
 v117a33_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-3bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 3 bits, con reset 
/*-------------------------------------------------*/

module v117a33_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [2:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 3; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module v816138 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v816138_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta OR
/*-------------------------------------------------*/

module v816138_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta OR
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a | b;
 
 //-- endmodule
endmodule
//---- Top entity
module vb2090f (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb2090f_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module vb2090f_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule
//---- Top entity
module v1c7dae #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 v1c7dae_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato
/*-------------------------------------------------*/

module v1c7dae_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output q
);
 reg q = INI;
 always @(posedge clk)
   q <= d;
endmodule
//---- Top entity
module v2b2787 #(
 parameter v20b6ac = "v20b6ac.list",
 parameter vdb1b8a = 3
) (
 input v6fc728,
 input v4dc7fc,
 input v876f60,
 input [6:0] v329779,
 input [7:0] v64d54b,
 input [7:0] v8d0637,
 input [1:0] vc5c3a8,
 input v54a38c,
 output vb80e1b,
 output ve89a9b,
 output [7:0] vfe18cf,
 output v17d400,
 output v122bbd
);
 localparam p1 = vdb1b8a;
 localparam p69 = v20b6ac;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire [0:1] w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire [0:7] w26;
 wire w27;
 wire [0:7] w28;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire [0:7] w40;
 wire [0:7] w41;
 wire w42;
 wire w43;
 wire [0:1] w44;
 wire [0:1] w45;
 wire [0:1] w46;
 wire [0:1] w47;
 wire [0:1] w48;
 wire w49;
 wire w50;
 wire w51;
 wire [0:6] w52;
 wire [0:7] w53;
 wire [0:7] w54;
 wire w55;
 wire w56;
 wire w57;
 wire w58;
 wire w59;
 wire w60;
 wire w61;
 wire w62;
 wire w63;
 wire w64;
 wire w65;
 wire w66;
 wire w67;
 wire w68;
 wire w70;
 assign w0 = v4dc7fc;
 assign vb80e1b = w6;
 assign ve89a9b = w9;
 assign vfe18cf = w28;
 assign w39 = v876f60;
 assign w47 = vc5c3a8;
 assign w52 = v329779;
 assign w53 = v64d54b;
 assign w54 = v8d0637;
 assign w55 = v54a38c;
 assign w56 = v6fc728;
 assign w57 = v6fc728;
 assign w58 = v6fc728;
 assign w59 = v6fc728;
 assign w60 = v6fc728;
 assign w61 = v6fc728;
 assign v17d400 = w62;
 assign w63 = v6fc728;
 assign w64 = v6fc728;
 assign w65 = v6fc728;
 assign w66 = v6fc728;
 assign w67 = v6fc728;
 assign v122bbd = w68;
 assign w23 = w10;
 assign w24 = w21;
 assign w25 = w7;
 assign w30 = w27;
 assign w35 = w33;
 assign w36 = w33;
 assign w36 = w35;
 assign w37 = w33;
 assign w37 = w35;
 assign w37 = w36;
 assign w42 = w19;
 assign w50 = w49;
 assign w57 = w56;
 assign w58 = w56;
 assign w58 = w57;
 assign w59 = w56;
 assign w59 = w57;
 assign w59 = w58;
 assign w60 = w56;
 assign w60 = w57;
 assign w60 = w58;
 assign w60 = w59;
 assign w61 = w56;
 assign w61 = w57;
 assign w61 = w58;
 assign w61 = w59;
 assign w61 = w60;
 assign w63 = w56;
 assign w63 = w57;
 assign w63 = w58;
 assign w63 = w59;
 assign w63 = w60;
 assign w63 = w61;
 assign w64 = w56;
 assign w64 = w57;
 assign w64 = w58;
 assign w64 = w59;
 assign w64 = w60;
 assign w64 = w61;
 assign w64 = w63;
 assign w65 = w56;
 assign w65 = w57;
 assign w65 = w58;
 assign w65 = w59;
 assign w65 = w60;
 assign w65 = w61;
 assign w65 = w63;
 assign w65 = w64;
 assign w66 = w56;
 assign w66 = w57;
 assign w66 = w58;
 assign w66 = w59;
 assign w66 = w60;
 assign w66 = w61;
 assign w66 = w63;
 assign w66 = w64;
 assign w66 = w65;
 assign w67 = w56;
 assign w67 = w57;
 assign w67 = w58;
 assign w67 = w59;
 assign w67 = w60;
 assign w67 = w61;
 assign w67 = w63;
 assign w67 = w64;
 assign w67 = w65;
 assign w67 = w66;
 assign w70 = w31;
 ve1a052 v3a7ca3 (
  .v6b2a2c(w0),
  .vba979e(w5),
  .v248807(w8),
  .v790e82(w10)
 );
 v23e63b #(
  .v75b2bb(p1)
 ) vb9b54e (
  .vd78d57(w2),
  .vd94b57(w13),
  .v3fd15e(w17),
  .v2379d3(w31),
  .vd92cd6(w55),
  .vcc8dd9(w56)
 );
 v8ba640 v29c916 (
  .v22d89c(w9),
  .vd0f6aa(w10),
  .vcfa9bb(w11),
  .vdff742(w35),
  .v30ed4b(w39),
  .v5dd22f(w65)
 );
 vfc9dac v07820e (
  .v8b19dd(w18),
  .v64d863(w19),
  .v3f8943(w43)
 );
 v35f267 va4427d (
  .v0e28cb(w19),
  .vcbab45(w34)
 );
 v56e0da v263adc (
  .v4fef26(w22),
  .v8fcf35(w24),
  .vd50ef8(w26),
  .v54c0b0(w63)
 );
 vb2090f va6a155 (
  .v3ca442(w20),
  .vcbab45(w21),
  .v0e28cb(w25)
 );
 v35f267 v2f4ce6 (
  .vcbab45(w20),
  .v0e28cb(w36)
 );
 v42ebf7 v478781 (
  .v9afc1f(w21),
  .ve8318d(w22),
  .vf54559(w23),
  .va4102a(w61)
 );
 vc146d4 v423c53 (
  .vc42023(w7),
  .v0e6505(w8),
  .v190b0b(w11),
  .vdb8ccc(w12),
  .v994809(w27),
  .v364b20(w37),
  .vf5404b(w60)
 );
 v89d234 v405ffe (
  .v39f831(w26),
  .vf892a0(w27),
  .vb1c024(w28),
  .v41eb95(w64)
 );
 v1c7dae vd9300d (
  .vf54559(w29),
  .ve8318d(w62),
  .va4102a(w66)
 );
 vb2090f vaa1091 (
  .vcbab45(w29),
  .v0e28cb(w30),
  .v3ca442(w32)
 );
 v3e4cef v0d19b0 (
  .ve41ea9(w3),
  .v610d09(w4),
  .v24cab2(w5),
  .vfb639d(w6),
  .v334d55(w16),
  .v6a8d27(w31),
  .v1b95b1(w58)
 );
 v35f267 va994d0 (
  .vcbab45(w32),
  .v0e28cb(w33)
 );
 v5cc6ec v0b57c9 (
  .vc93bbe(w33),
  .vb186da(w34),
  .v381ebf(w38),
  .v50d6c6(w50)
 );
 v725b7e v1b392a (
  .v9fb85f(w38)
 );
 v2b2787_v0fa555 v0fa555 (
  .b(w40),
  .w(w49),
  .a(w52)
 );
 vf1c84b vb60f13 (
  .v69afd7(w2),
  .v9c7419(w3),
  .v7da9df(w4),
  .v945c79(w7),
  .v1a1b36(w12),
  .v1368c3(w14),
  .v4c9f5f(w15),
  .vec0e14(w17),
  .vef36bc(w41),
  .v1c6ca1(w57)
 );
 v548334 ve8c896 (
  .ve9b26f(w13),
  .v8762e7(w14),
  .v650051(w15),
  .vea582e(w16),
  .v80c1bb(w18),
  .vf190ba(w44),
  .v49b5f9(w59)
 );
 v56cc18 vdc270f (
  .v3d1227(w40),
  .v3fb88b(w41),
  .vda0bfd(w42),
  .v50d6c6(w43),
  .v062092(w53),
  .v21e136(w54)
 );
 veebee1 v39309f (
  .v7fb9b3(w44),
  .v340b68(w45),
  .vc9d156(w46),
  .v50d6c6(w51)
 );
 v945d5c vb7cc31 (
  .v2978f0(w45)
 );
 vceff2d v2dc4e3 (
  .v2978f0(w46)
 );
 va47586 #(
  .vb36a78(p69)
 ) vb4821c (
  .v851180(w47),
  .vfde47f(w48)
 );
 vfc9dac ve5aef5 (
  .v8b19dd(w48),
  .v64d863(w49),
  .v3f8943(w51)
 );
 v1c7dae vfda31a (
  .va4102a(w67),
  .ve8318d(w68),
  .vf54559(w70)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Controlador i2c que permite 3 transacciones: escritura, lectura y selección
/*-------------------------------------------------*/

module v2b2787_v0fa555 (
 input [6:0] a,
 input w,
 output [7:0] b
);
 assign b = {a,w};
endmodule
//---- Top entity
module ve1a052 (
 input v6b2a2c,
 input v248807,
 input vba979e,
 output v790e82
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v6b2a2c;
 assign w1 = v248807;
 assign w2 = vba979e;
 assign v790e82 = w3;
 ve1a052_v43ad2d v43ad2d (
  .pin(w0),
  .oe(w1),
  .dout(w2),
  .din(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Tri-state  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Tri-state logic block
/*-------------------------------------------------*/

module ve1a052_v43ad2d (
 input pin,
 input oe,
 input dout,
 output din
);
   SB_IO #(
       .PIN_TYPE(6'b1010_01),
       .PULLUP(1'b0)
   ) triState (
       .PACKAGE_PIN(pin),
       .OUTPUT_ENABLE(oe),
       .D_OUT_0(dout),
       .D_IN_0(din)
   );
endmodule
//---- Top entity
module v23e63b #(
 parameter vf8c69c = 1,
 parameter v75b2bb = 2,
 parameter vd3b0b7 = 1
) (
 input vcc8dd9,
 input v2379d3,
 input vd92cd6,
 output vd78d57,
 output v3fd15e,
 output vd94b57
);
 localparam p1 = v75b2bb;
 localparam p4 = vd3b0b7;
 localparam p5 = vf8c69c;
 wire w0;
 wire w2;
 wire w3;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 assign vd78d57 = w0;
 assign v3fd15e = w2;
 assign w6 = v2379d3;
 assign w9 = vd92cd6;
 assign w10 = v2379d3;
 assign w11 = vcc8dd9;
 assign w12 = vcc8dd9;
 assign w13 = vcc8dd9;
 assign w14 = vcc8dd9;
 assign vd94b57 = w15;
 assign w17 = vcc8dd9;
 assign w8 = w0;
 assign w10 = w6;
 assign w12 = w11;
 assign w13 = w11;
 assign w13 = w12;
 assign w14 = w11;
 assign w14 = w12;
 assign w14 = w13;
 assign w16 = w3;
 assign w17 = w11;
 assign w17 = w12;
 assign w17 = w13;
 assign w17 = w14;
 vb959c2 #(
  .v679341(p5)
 ) vd7cb01 (
  .vb4c770(w0),
  .ve68648(w6),
  .v3c6908(w9),
  .v581b48(w11)
 );
 v3b630a #(
  .v187a47(p1)
 ) v65ebbc (
  .va9e2af(w3),
  .v6e1dd1(w7),
  .v5688a8(w13)
 );
 vb959c2 #(
  .v679341(p4)
 ) ve13051 (
  .vb4c770(w2),
  .v3c6908(w3),
  .ve68648(w10),
  .v581b48(w14)
 );
 v7eacdf v2908cb (
  .v2dffca(w7),
  .v10eedb(w8),
  .v0884a0(w12)
 );
 v1c7dae v0241a5 (
  .ve8318d(w15),
  .vf54559(w16),
  .va4102a(w17)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c-start  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generar la condición de start en el bus I2C
/*-------------------------------------------------*/
//---- Top entity
module v3b630a #(
 parameter v187a47 = 100
) (
 input v5688a8,
 input v6e1dd1,
 output veabfb2,
 output va9e2af
);
 localparam p4 = v187a47;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v6e1dd1;
 assign veabfb2 = w1;
 assign va9e2af = w2;
 assign w3 = v5688a8;
 v3b630a_v3140f5 #(
  .US(p4)
 ) v3140f5 (
  .start(w0),
  .p(w1),
  .tic(w2),
  .clk(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- timer-usec  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Temporizador en microsegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar
/*-------------------------------------------------*/

module v3b630a_v3140f5 #(
 parameter US = 0
) (
 input clk,
 input start,
 output p,
 output tic
);
 //localparam US;
 
 //-- Constante para dividir y obtener una señal de 
 //-- periodo 1 micro-segundo
 localparam M = 12;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el corazon
 wire rst_heart;
 
 //-- Overflow del temporizador del corazon
 wire ov_heart;
 
 //-- Habilitacion del corazon
 wire ena;
 
 //-- Tics del corazon
 wire tic_heart;
 
 //-- Contador del corazon
 reg [N-1:0] heart=0;
 
 always @(posedge clk)
   if (rst_heart)
     heart <= 0;
   else
     heart <= heart + 1;
 
 //-- Overflow del contador
 assign ov_heart = (heart == M-1);
 
 //-- La salida del corazon es la señal de overflow
 assign tic_heart = ov_heart;
 
 //-- Reset del corazon
 assign rst_heart =~ena | ov_heart;
 
 
 
 //--------------------------------------------
 //-- Contador de tics
 //--------------------------------------------
 
 //-- Calcular el numero de bits para almacenar US tics
 localparam CB = $clog2(US);
 
 reg [CB:0] counter = 0;
 
 //-- Overflow del contador
 wire ov;
 
 //-- Señal de reset del contador
 wire rst;
 
 always @(posedge clk)
 if (rst)
   counter <= 0;
 else
   if (tic_heart)
     counter <= counter + 1;
 
 //-- Evento: cuenta máxima de tics alcanzada
 assign ov = (counter == US);
 
 //---------------------------------------
 //-- Biestable de estado del timer
 //-- 0: Apagado  
 //-- 1: Funcionando
 reg q = 0;
 
 always @(posedge clk)
   if (start)
     q <= 1'b1;
   else if (rst)
     q<=1'b0;
     
 //-- Lógica de reset
 //En función de la entrada, el estado y  
 // el overflow se inicializa el contador y 
 // se habilita el corazón de tics
 assign rst = ~q | ov | start;
 assign ena = ~rst;
 
 //-- Salida de pulso
 assign p = q;
 
 //-- Salida de tic
 //-- Saca un tic cuando ha finalizado la cuenta
 assign tic = ov;
 
endmodule
//---- Top entity
module v7eacdf (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v7eacdf_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bajada  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente
/*-------------------------------------------------*/

module v7eacdf_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (q & ~i);  
endmodule
//---- Top entity
module v8ba640 (
 input v5dd22f,
 input vd0f6aa,
 input vcfa9bb,
 input vdff742,
 input v30ed4b,
 output v22d89c
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign v22d89c = w0;
 assign w4 = vd0f6aa;
 assign w5 = vdff742;
 assign w6 = vcfa9bb;
 assign w7 = v30ed4b;
 assign w8 = v5dd22f;
 assign w9 = v5dd22f;
 assign w9 = w8;
 vb2090f v8826f2 (
  .vcbab45(w2),
  .v3ca442(w3),
  .v0e28cb(w4)
 );
 vb959c2 v623a62 (
  .vb4c770(w0),
  .ve68648(w1),
  .v3c6908(w7),
  .v581b48(w9)
 );
 v8e2728 vf8bd2a (
  .v2dffca(w1),
  .v10eedb(w2),
  .v0884a0(w8)
 );
 vb2090f v9608b2 (
  .vcbab45(w3),
  .v3ca442(w5),
  .v0e28cb(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c-nak  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detección de los ACKs del esclavo. Si no se recibe, se activa la salida NAK
/*-------------------------------------------------*/
//---- Top entity
module vfc9dac (
 input [1:0] v8b19dd,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign w2 = v8b19dd;
 vfc9dac_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Separador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 2-bits en dos cables
/*-------------------------------------------------*/

module vfc9dac_v9a2a06 (
 input [1:0] i,
 output o1,
 output o0
);
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v56e0da #(
 parameter v27bfca = 0
) (
 input v54c0b0,
 input v4fef26,
 input v8fcf35,
 output v0d3330,
 output [7:0] vd50ef8
);
 localparam p0 = v27bfca;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign v0d3330 = w1;
 assign w2 = v4fef26;
 assign w3 = v8fcf35;
 assign w4 = v54c0b0;
 assign vd50ef8 = w5;
 v56e0da_v56d51d #(
  .INI(p0)
 ) v56d51d (
  .so(w1),
  .si(w2),
  .shift(w3),
  .clk(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro-desplazamiento  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de desplazamiento (izquierda) de 8 bits
/*-------------------------------------------------*/

module v56e0da_v56d51d #(
 parameter INI = 0
) (
 input clk,
 input si,
 input shift,
 output so,
 output [7:0] q
);
 //-- Numero de bits el registros de desplazamiento
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (shift)
     q <= {q[N-2:0], si};
     
 //-- Sacar el bit de mayor peso por serial-out    
 assign so = q[N-1];
endmodule
//---- Top entity
module v42ebf7 #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 input v9afc1f,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 assign w4 = v9afc1f;
 v42ebf7_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3),
  .load(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato
/*-------------------------------------------------*/

module v42ebf7_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 input load,
 output q
);
 reg q = INI;
 always @(posedge clk)
   if (load)
     q <= d;
endmodule
//---- Top entity
module vc146d4 #(
 parameter ve8153a = 1,
 parameter vd0eb71 = 9,
 parameter v56a06a = 5
) (
 input vf5404b,
 input vc42023,
 input v364b20,
 input vdb8ccc,
 output v190b0b,
 output v994809,
 output v0e6505
);
 localparam p0 = vd0eb71;
 localparam p1 = v56a06a;
 localparam p9 = ve8153a;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 assign v0e6505 = w8;
 assign w10 = vdb8ccc;
 assign w11 = v364b20;
 assign w12 = vc42023;
 assign w13 = vdb8ccc;
 assign v190b0b = w14;
 assign w15 = vf5404b;
 assign w16 = vf5404b;
 assign w17 = vf5404b;
 assign w18 = vf5404b;
 assign v994809 = w19;
 assign w4 = w2;
 assign w13 = w10;
 assign w14 = w3;
 assign w16 = w15;
 assign w17 = w15;
 assign w17 = w16;
 assign w18 = w15;
 assign w18 = w16;
 assign w18 = w17;
 assign w19 = w2;
 assign w19 = w4;
 vd014cb #(
  .v5e4a03(p0)
 ) vf11cbd (
  .v712cd1(w2),
  .v7c533e(w12),
  .vdd729a(w17)
 );
 v3b630a #(
  .v187a47(p1)
 ) ve93ca3 (
  .v6e1dd1(w2),
  .veabfb2(w3),
  .v5688a8(w15)
 );
 v35f267 v17c9d1 (
  .v0e28cb(w3),
  .vcbab45(w5)
 );
 v42ebf7 #(
  .v71e305(p9)
 ) v1113ff (
  .ve8318d(w7),
  .v9afc1f(w10),
  .vf54559(w11),
  .va4102a(w16)
 );
 vb959c2 v1d8b2d (
  .ve68648(w4),
  .vb4c770(w6),
  .v3c6908(w13),
  .v581b48(w18)
 );
 v5cc6ec v809f57 (
  .vb186da(w5),
  .v381ebf(w6),
  .v50d6c6(w7),
  .vc93bbe(w8)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c-io  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Gestion de la entrada/salida en el bus i2c
/*-------------------------------------------------*/
//---- Top entity
module vd014cb #(
 parameter v5e4a03 = 256
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [7:0] vb86fe4,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vb86fe4 = w5;
 vd014cb_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-8bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 8 bits, con reset 
/*-------------------------------------------------*/

module vd014cb_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [7:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 8; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 0;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module v5cc6ec (
 input vb186da,
 input v381ebf,
 input v50d6c6,
 output vc93bbe
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v50d6c6;
 assign vc93bbe = w1;
 assign w2 = v381ebf;
 assign w3 = vb186da;
 v5cc6ec_ve4e0df ve4e0df (
  .sel(w0),
  .o(w1),
  .i0(w2),
  .i1(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1
/*-------------------------------------------------*/

module v5cc6ec_ve4e0df (
 input i1,
 input i0,
 input sel,
 output o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg _o;
 
 always @(*) begin
     case(sel)
         0: _o = i0;
         1: _o = i1;
         default: _o = i0;
     endcase
 end
 
 assign o = _o;
 
endmodule
//---- Top entity
module v3e4cef #(
 parameter vd75665 = 5,
 parameter ve0391a = 2
) (
 input v1b95b1,
 input ve41ea9,
 input v610d09,
 input v334d55,
 output v24cab2,
 output vfb639d,
 output v6a8d27
);
 localparam p3 = ve0391a;
 localparam p15 = vd75665;
 wire w0;
 wire w1;
 wire w2;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 assign vfb639d = w0;
 assign v24cab2 = w4;
 assign v6a8d27 = w6;
 assign w8 = v610d09;
 assign w9 = ve41ea9;
 assign w11 = v1b95b1;
 assign w12 = v1b95b1;
 assign w13 = v1b95b1;
 assign w14 = v1b95b1;
 assign w16 = v334d55;
 assign w19 = v1b95b1;
 assign w22 = v1b95b1;
 assign w7 = w2;
 assign w12 = w11;
 assign w13 = w11;
 assign w13 = w12;
 assign w14 = w11;
 assign w14 = w12;
 assign w14 = w13;
 assign w18 = w17;
 assign w19 = w11;
 assign w19 = w12;
 assign w19 = w13;
 assign w19 = w14;
 assign w20 = w10;
 assign w21 = w6;
 assign w22 = w11;
 assign w22 = w12;
 assign w22 = w13;
 assign w22 = w14;
 assign w22 = w19;
 vb959c2 v2301a0 (
  .vb4c770(w1),
  .v3c6908(w10),
  .v581b48(w12),
  .ve68648(w17)
 );
 v816138 v4f5af9 (
  .vcbab45(w0),
  .v3ca442(w1),
  .v0e28cb(w8)
 );
 vb959c2 v8c0d08 (
  .ve68648(w2),
  .vb4c770(w5),
  .v581b48(w14),
  .v3c6908(w20)
 );
 v3b630a #(
  .v187a47(p3)
 ) vd80ff7 (
  .va9e2af(w2),
  .v5688a8(w11),
  .v6e1dd1(w18)
 );
 v816138 vb4f732 (
  .vcbab45(w4),
  .v0e28cb(w5),
  .v3ca442(w9)
 );
 v1c7dae v947bc6 (
  .ve8318d(w6),
  .vf54559(w7),
  .va4102a(w13)
 );
 v3b630a #(
  .v187a47(p15)
 ) vdc731d (
  .v6e1dd1(w16),
  .va9e2af(w17),
  .v5688a8(w19)
 );
 v1c7dae v44f3ab (
  .ve8318d(w10),
  .vf54559(w21),
  .va4102a(w22)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c-stop  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generar una condición de parada en el bus i2c
/*-------------------------------------------------*/
//---- Top entity
module v725b7e (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v725b7e_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 1
/*-------------------------------------------------*/

module v725b7e_vb2eccd (
 output q
);
 //-- Bit constante a 1
 assign q = 1'b1;
 
 
endmodule
//---- Top entity
module vf1c84b #(
 parameter vd32d28 = 121,
 parameter vea5b6c = 9,
 parameter v9ee7b6 = 2,
 parameter vab6018 = 5
) (
 input v1c6ca1,
 input v69afd7,
 input vec0e14,
 input [7:0] vef36bc,
 input v1368c3,
 output v9c7419,
 output v7da9df,
 output v945c79,
 output v1a1b36,
 output v4c9f5f
);
 localparam p0 = vea5b6c;
 localparam p1 = vd32d28;
 localparam p2 = vab6018;
 localparam p5 = v9ee7b6;
 wire w3;
 wire w4;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire [0:7] w30;
 assign v7da9df = w6;
 assign v9c7419 = w8;
 assign w10 = v69afd7;
 assign w11 = v1368c3;
 assign w12 = vec0e14;
 assign w16 = v1c6ca1;
 assign w17 = v1c6ca1;
 assign w18 = v1c6ca1;
 assign w19 = v1c6ca1;
 assign w20 = v1c6ca1;
 assign v4c9f5f = w24;
 assign v945c79 = w25;
 assign w26 = v1368c3;
 assign v1a1b36 = w26;
 assign w27 = v1368c3;
 assign w28 = v1368c3;
 assign w30 = vef36bc;
 assign w14 = w13;
 assign w15 = w13;
 assign w15 = w14;
 assign w17 = w16;
 assign w18 = w16;
 assign w18 = w17;
 assign w19 = w16;
 assign w19 = w17;
 assign w19 = w18;
 assign w20 = w16;
 assign w20 = w17;
 assign w20 = w18;
 assign w20 = w19;
 assign w25 = w4;
 assign w26 = w11;
 assign w27 = w11;
 assign w27 = w26;
 assign w28 = w11;
 assign w28 = w26;
 assign w28 = w27;
 v3b630a #(
  .v187a47(p2)
 ) vdd2366 (
  .v6e1dd1(w4),
  .veabfb2(w7),
  .v5688a8(w20),
  .va9e2af(w23)
 );
 v21cfcc vbd59f1 (
  .v9fb85f(w29)
 );
 v3b630a #(
  .v187a47(p5)
 ) v9a0bec (
  .va9e2af(w4),
  .v6e1dd1(w13),
  .v5688a8(w19)
 );
 v816138 v163e96 (
  .vcbab45(w6),
  .v3ca442(w7),
  .v0e28cb(w12)
 );
 v816138 ve52c88 (
  .vcbab45(w8),
  .v0e28cb(w9),
  .v3ca442(w10)
 );
 v086d7d #(
  .v7fc9e0(p0),
  .vd8d9ac(p1)
 ) v0f7762 (
  .v37ae70(w11),
  .ved4c0c(w13),
  .vb0a8d8(w18),
  .vffcbf8(w22)
 );
 v35f267 vf276f1 (
  .vcbab45(w21),
  .v0e28cb(w22)
 );
 vb2090f v073720 (
  .v3ca442(w21),
  .v0e28cb(w23),
  .vcbab45(w24)
 );
 v45f630 vdaad51 (
  .vf54559(w3),
  .ve8318d(w9),
  .v9afc1f(w15),
  .va4102a(w17),
  .vbbc50c(w27)
 );
 v53847c v1bd8df (
  .v0d3330(w3),
  .v7d29fb(w14),
  .v4a6801(w16),
  .v9bfaa9(w28),
  .v3ba3e6(w29),
  .v67ccbf(w30)
 );
endmodule

/*-------------------------------------------------*/
/*-- i2c-data  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Inyectar un byte en el bus i2c
/*-------------------------------------------------*/
//---- Top entity
module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 0
/*-------------------------------------------------*/

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule
//---- Top entity
module v086d7d #(
 parameter vd8d9ac = 15,
 parameter v7fc9e0 = 24
) (
 input vb0a8d8,
 input v37ae70,
 output ved4c0c,
 output vffcbf8,
 output v5255d3
);
 localparam p1 = vd8d9ac;
 localparam p6 = v7fc9e0;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 assign w7 = v37ae70;
 assign w8 = vb0a8d8;
 assign w9 = vb0a8d8;
 assign w10 = vb0a8d8;
 assign ved4c0c = w11;
 assign v5255d3 = w12;
 assign vffcbf8 = w13;
 assign w5 = w0;
 assign w9 = w8;
 assign w10 = w8;
 assign w10 = w9;
 assign w11 = w3;
 assign w12 = w2;
 assign w13 = w0;
 assign w13 = w5;
 vb959c2 v560ce2 (
  .vb4c770(w0),
  .v3c6908(w2),
  .ve68648(w7),
  .v581b48(w8)
 );
 vd585a5 #(
  .vfb06ae(p1)
 ) v6fd693 (
  .vb27aaa(w0),
  .v2a8434(w3),
  .vac0eb2(w9)
 );
 vd0fde2 #(
  .v5e4a03(p6)
 ) v427093 (
  .v712cd1(w2),
  .v7c533e(w3),
  .ve61673(w4),
  .vdd729a(w10)
 );
 v35f267 vfb2363 (
  .vcbab45(w4),
  .v0e28cb(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Heart-tics  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón  finito de tics. Emitir num tics cuando se recibe un tic de start
/*-------------------------------------------------*/
//---- Top entity
module vd585a5 #(
 parameter vfb06ae = 15
) (
 input vac0eb2,
 input vb27aaa,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 wire w3;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 assign w3 = vb27aaa;
 vd585a5_v6cac2f #(
  .TICS(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1),
  .ena(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tics  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics, cuyo periodo está especificado en tics también
/*-------------------------------------------------*/

module vd585a5_v6cac2f #(
 parameter TICS = 0
) (
 input clk,
 input ena,
 output o
);
 
 
 //-- Los TICs son directamente el módulo del contador
 localparam M = TICS;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 wire ov;
 assign ov = (divcounter == M-1);
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = ov | (ena == 0);
 
 //-- La salida es la señal de overflow
 assign o = ov;
 
 
 
 
endmodule
//---- Top entity
module vd0fde2 #(
 parameter v5e4a03 = 32
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [4:0] v534dbf,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:4] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign v534dbf = w5;
 vd0fde2_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-5bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 5 bits, con reset 
/*-------------------------------------------------*/

module vd0fde2_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [4:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 5; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module v45f630 #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vbbc50c,
 input vf54559,
 input v9afc1f,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 wire w5;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 assign w4 = v9afc1f;
 assign w5 = vbbc50c;
 v45f630_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3),
  .load(w4),
  .rst(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato
/*-------------------------------------------------*/

module v45f630_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input rst,
 input d,
 input load,
 output q
);
 reg q = INI;
 always @(posedge clk)
   if (rst)
     q <= INI;
   else if (load)
     q <= d;
endmodule
//---- Top entity
module v53847c #(
 parameter vc96e81 = 0
) (
 input v4a6801,
 input v3ba3e6,
 input [7:0] v67ccbf,
 input v9bfaa9,
 input v7d29fb,
 output v0d3330,
 output [7:0] vd50ef8
);
 localparam p0 = vc96e81;
 wire [0:7] w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 assign vd50ef8 = w1;
 assign w2 = v4a6801;
 assign w3 = v3ba3e6;
 assign w4 = v67ccbf;
 assign w5 = v7d29fb;
 assign w6 = v9bfaa9;
 assign v0d3330 = w7;
 v53847c_v768248 #(
  .INI(p0)
 ) v768248 (
  .q(w1),
  .clk(w2),
  .si(w3),
  .d(w4),
  .shift(w5),
  .load(w6),
  .so(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro-desplazamiento  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de desplazamiento (izquierda) de 8 bits
/*-------------------------------------------------*/

module v53847c_v768248 #(
 parameter INI = 0
) (
 input clk,
 input si,
 input [7:0] d,
 input load,
 input shift,
 output so,
 output [7:0] q
);
 //-- Numero de bits el registros de desplazamiento
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
   else if (shift)
     q <= {q[N-2:0], si};
     
 //-- Sacar el bit de mayor peso por serial-out    
 assign so = q[N-1];
endmodule
//---- Top entity
module v548334 (
 input v49b5f9,
 input [1:0] vf190ba,
 input v650051,
 input ve9b26f,
 output v8762e7,
 output vb50f83,
 output [1:0] v80c1bb,
 output vea582e
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire [0:1] w22;
 wire [0:1] w23;
 assign v8762e7 = w2;
 assign w7 = ve9b26f;
 assign w8 = v650051;
 assign w9 = v650051;
 assign vea582e = w14;
 assign w15 = v49b5f9;
 assign w16 = v49b5f9;
 assign w17 = v49b5f9;
 assign w18 = v49b5f9;
 assign w19 = v49b5f9;
 assign w20 = v49b5f9;
 assign vb50f83 = w21;
 assign v80c1bb = w22;
 assign w23 = vf190ba;
 assign w4 = w0;
 assign w9 = w8;
 assign w12 = w0;
 assign w12 = w4;
 assign w13 = w0;
 assign w13 = w4;
 assign w13 = w12;
 assign w16 = w15;
 assign w17 = w15;
 assign w17 = w16;
 assign w18 = w15;
 assign w18 = w16;
 assign w18 = w17;
 assign w19 = w15;
 assign w19 = w16;
 assign w19 = w17;
 assign w19 = w18;
 assign w20 = w15;
 assign w20 = w16;
 assign w20 = w17;
 assign w20 = w18;
 assign w20 = w19;
 assign w21 = w0;
 assign w21 = w4;
 assign w21 = w12;
 assign w21 = w13;
 vb959c2 v587931 (
  .vb4c770(w0),
  .ve68648(w7),
  .v3c6908(w10),
  .v581b48(w16)
 );
 v8e2728 v756c58 (
  .v10eedb(w0),
  .v2dffca(w1),
  .v0884a0(w15)
 );
 v816138 vac01fb (
  .v0e28cb(w1),
  .vcbab45(w3),
  .v3ca442(w5)
 );
 vb2090f vdae2b4 (
  .vcbab45(w2),
  .v0e28cb(w3),
  .v3ca442(w4)
 );
 v1c7dae vb9e6ad (
  .ve8318d(w5),
  .vf54559(w6),
  .va4102a(w19)
 );
 v1c7dae v378e34 (
  .ve8318d(w6),
  .vf54559(w8),
  .va4102a(w17)
 );
 v35f267 vb4a035 (
  .vcbab45(w11),
  .v0e28cb(w12)
 );
 v7eacdf v77d7c8 (
  .v10eedb(w13),
  .v2dffca(w14),
  .v0884a0(w20)
 );
 vb82ff1 v74dd34 (
  .v7c533e(w9),
  .v712cd1(w10),
  .ve61673(w11),
  .vdd729a(w18),
  .vd76104(w22),
  .v62eb51(w23)
 );
endmodule

/*-------------------------------------------------*/
/*-- machine-loop  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Máquina para hacer repeticiones
/*-------------------------------------------------*/
//---- Top entity
module vb82ff1 (
 input vdd729a,
 input ve61673,
 input [1:0] v62eb51,
 input v7c533e,
 output [1:0] vd76104,
 output v712cd1
);
 wire [0:1] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:1] w5;
 assign vd76104 = w0;
 assign w1 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign w5 = v62eb51;
 vb82ff1_vbd6086 vbd6086 (
  .q(w0),
  .rst(w1),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .mod(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-2bits-up-rst-mod-M  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 2 bits, con reset 
/*-------------------------------------------------*/

module vb82ff1_vbd6086 (
 input clk,
 input rst,
 input [1:0] mod,
 input cnt,
 output [1:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 2; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == mod);
     
endmodule
//---- Top entity
module v56cc18 (
 input [7:0] vbdd51f,
 input [7:0] v21e136,
 input [7:0] v062092,
 input [7:0] v3d1227,
 input v50d6c6,
 input vda0bfd,
 output [7:0] v3fb88b
);
 wire w0;
 wire w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 wire [0:7] w5;
 wire [0:7] w6;
 assign w0 = vda0bfd;
 assign w1 = v50d6c6;
 assign v3fb88b = w2;
 assign w3 = v3d1227;
 assign w4 = v062092;
 assign w5 = v21e136;
 assign w6 = vbdd51f;
 v56cc18_ve4e0df ve4e0df (
  .s0(w0),
  .s1(w1),
  .o(w2),
  .i0(w3),
  .i1(w4),
  .i2(w5),
  .i3(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 4 a 1 de 8 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 4 a 1 de 8 bits
/*-------------------------------------------------*/

module v56cc18_ve4e0df (
 input [7:0] i3,
 input [7:0] i2,
 input [7:0] i1,
 input [7:0] i0,
 input s1,
 input s0,
 output [7:0] o
);
 //-- Multiplexor de 4 a 1, 
 //-- de 8 bits
 
 wire [1:0] sel = {s1, s0};
 
 assign o = (sel == 2'b00) ? i0 :
            (sel == 2'b01) ? i1 :
            (sel == 2'b10) ? i2 : i3;
 
 
endmodule
//---- Top entity
module veebee1 (
 input [1:0] vc9d156,
 input [1:0] v340b68,
 input v50d6c6,
 output [1:0] v7fb9b3
);
 wire w0;
 wire [0:1] w1;
 wire [0:1] w2;
 wire [0:1] w3;
 assign w0 = v50d6c6;
 assign v7fb9b3 = w1;
 assign w2 = vc9d156;
 assign w3 = v340b68;
 veebee1_ve4e0df ve4e0df (
  .sel(w0),
  .o(w1),
  .i1(w2),
  .i0(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1 de 2 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1 de 2 bits
/*-------------------------------------------------*/

module veebee1_ve4e0df (
 input [1:0] i1,
 input [1:0] i0,
 input sel,
 output [1:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 2 bits
 
 reg [1:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule
//---- Top entity
module v945d5c #(
 parameter vfffc23 = 2
) (
 output [1:0] v2978f0
);
 localparam p1 = vfffc23;
 wire [0:1] w0;
 assign v2978f0 = w0;
 v157753 #(
  .vc5c8ea(p1)
 ) v9b88e7 (
  .v4ffce0(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_2_2bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 2 para bus de 2 bits
/*-------------------------------------------------*/
//---- Top entity
module v157753 #(
 parameter vc5c8ea = 0
) (
 output [1:0] v4ffce0
);
 localparam p1 = vc5c8ea;
 wire [0:1] w0;
 assign v4ffce0 = w0;
 v157753_v465065 #(
  .VALUE(p1)
 ) v465065 (
  .k(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-2bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0
/*-------------------------------------------------*/

module v157753_v465065 #(
 parameter VALUE = 0
) (
 output [1:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module vceff2d #(
 parameter vfffc23 = 3
) (
 output [1:0] v2978f0
);
 localparam p1 = vfffc23;
 wire [0:1] w0;
 assign v2978f0 = w0;
 v157753 #(
  .vc5c8ea(p1)
 ) v2208c0 (
  .v4ffce0(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_3_2bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 3 para bus de 2 bits
/*-------------------------------------------------*/
//---- Top entity
module va47586 #(
 parameter vb36a78 = "vb36a78.list"
) (
 input [1:0] v851180,
 output [1:0] vfde47f
);
 localparam p0 = vb36a78;
 wire [0:1] w1;
 wire [0:1] w2;
 assign w1 = v851180;
 assign vfde47f = w2;
 va47586_v361fe9 #(
  .DATA(p0)
 ) v361fe9 (
  .i(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- mi-tabla2-2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Circuito combinacional de 2 entradas y 2 salidas
/*-------------------------------------------------*/

module va47586_v361fe9 #(
 parameter DATA = 0
) (
 input [1:0] i,
 output [1:0] q
);
 
 //-- Bits del bus de entrada
 localparam N = 2;
 
 //-- Bits del bus de salida
 localparam M = 2;
 
 //-- Calcular tamaño de la tabla
 //-- (filas) segun los bits de entrada
 localparam TAM = 2 ** N;
 
 //-- Definición de la tabla
 //-- Tabla de TAM elementos de M bits
 reg [M-1:0] tabla[0:TAM-1];
 
 //-- Read the table
 assign q = tabla[i];
 
 //-- Init table from DATA parameters
 initial begin
   if (DATA) $readmemb(DATA, tabla);
 end
endmodule
//---- Top entity
module v359a55 (
 input [7:0] v02d898,
 input [7:0] vd6b984,
 input v50d6c6,
 output [7:0] vf24dba
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 assign w0 = v50d6c6;
 assign w1 = vd6b984;
 assign w2 = v02d898;
 assign vf24dba = w3;
 v359a55_ve4e0df ve4e0df (
  .sel(w0),
  .i0(w1),
  .i1(w2),
  .o(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1 de 8 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1 de 8 bits
/*-------------------------------------------------*/

module v359a55_ve4e0df (
 input [7:0] i1,
 input [7:0] i0,
 input sel,
 output [7:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg [7:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule
//---- Top entity
module vd9a3cf #(
 parameter v16d6b8 = 0
) (
 input [2:0] v2e7398,
 output v18e78c
);
 localparam p2 = v16d6b8;
 wire w0;
 wire [0:2] w1;
 assign v18e78c = w0;
 assign w1 = v2e7398;
 vd9a3cf_vd75681 #(
  .B(p2)
 ) vd75681 (
  .eq(w0),
  .a(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Igual-1-op  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador de igualdad, de un operando de 3 bits
/*-------------------------------------------------*/

module vd9a3cf_vd75681 #(
 parameter B = 0
) (
 input [2:0] a,
 output eq
);
 assign eq = (a == B);
endmodule
//---- Top entity
module vfbbede #(
 parameter vb36a78 = "vb36a78.list"
) (
 input [1:0] v851180,
 output [7:0] vfde47f
);
 localparam p0 = vb36a78;
 wire [0:1] w1;
 wire [0:7] w2;
 assign w1 = v851180;
 assign vfde47f = w2;
 vfbbede_v361fe9 #(
  .DATA(p0)
 ) v361fe9 (
  .i(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- mi-tabla2-8  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Circuito combinacional de 2 entradas y 8 salidas
/*-------------------------------------------------*/

module vfbbede_v361fe9 #(
 parameter DATA = 0
) (
 input [1:0] i,
 output [7:0] q
);
 
 //-- Bits del bus de entrada
 localparam N = 2;
 
 //-- Bits del bus de salida
 localparam M = 8;
 
 //-- Calcular tamaño de la tabla
 //-- (filas) segun los bits de entrada
 localparam TAM = 2 ** N;
 
 //-- Definición de la tabla
 //-- Tabla de TAM elementos de M bits
 reg [M-1:0] tabla[0:TAM-1];
 
 //-- Read the table
 assign q = tabla[i];
 
 //-- Init table from DATA parameters
 initial begin
   if (DATA) $readmemh(DATA, tabla);
 end
endmodule

module main_vb35f32 (
 input clk,
 input [7:0] CH1,
 output PPM,
 output PPM_I,
 output Start,
 output [1:0] Selector
);
 // Generador PPM 4 canales V_02, Entrada única, Llorens_MRC, Nov 2021.
 
 reg[31:0] contador;
 reg[31:0] puntero;
 reg[31:0] canal1, canal2, canal3, canal4, valor;
 reg PPM, PPM_I;  
 reg Start;
 reg[1:0] Selector;
 
 initial
     begin
     contador = 0;
     puntero = 0;
     PPM = 0;
     PPM_I = 1;
     end
 
 always @(posedge clk )
     begin
 
     contador <= contador + 1;    // xxxxx  
 
     //************************************************
     if (contador == 200047)     // Select Canal 1        // 16.67 ms
         begin
         Selector <= 0;    
         Start    <= 1;
         end
     if (contador == 210047)     // Lectura Canal 1      // 17.5 ms      0.83 ms
         begin
         Start  <= 0;        
         canal1 <= 12048 + (CH1*47);
         end
     //************************************************
     if (contador == 210048)     // Select Canal 2       // 17.5 ms + 1 clk
         begin
         Selector <= 1;    
         Start    <= 1;
         end
     if (contador == 220048)     // Lectura Canal 2     // 18.34 ms      0.83 ms
         begin
         Start    <= 0;
         canal2   <= 12048 + (CH1*47);
         end
     //************************************************
     if (contador == 220049)     // Select Canal 3       //18.34 + 1clk
         begin
         Selector <= 2;    
         Start    <= 1;
         end
     if (contador == 230049)     // Lectura Canal 3     //19.17 ms      0.83 ms
         begin
         Start    <= 0;
         canal3   <= 12048 + (CH1*47);
         end
     //************************************************
     if (contador == 230050)     // Select Canal 4      //19.17ms +1clk   
         begin
         Selector <= 3;    
         Start    <= 1;
         end
     if (contador == 240050)     // Lectura Canal 4     //20 ms         0.83 ms
         begin
         Start    <= 0;
         canal4   <= 12048 + (CH1*47);
         end
 
     //************************************************
     if (contador == 240960)     // Final de frame PPM       // 20 ms
         begin
         contador <= 0;
         puntero  <= 0;
         PPM <= 0; PPM_I <= 1;
         end
 
     //************************************************
     puntero = 0;
     if (contador == puntero)    // ON primer pulso
         begin
         PPM <= 1; PPM_I <= 0; 
         end
     puntero = puntero+3614;
     if (contador == puntero)    // OFF primer pulso
         begin
         PPM <= 0; PPM_I <= 1; 
         end
     //************************************************
     puntero = puntero+canal1;
     if (contador == puntero)    // ON segundo pulso
         begin
         PPM <= 1; PPM_I <= 0;
         end
     puntero = puntero+3614;
     if (contador == puntero)    // OFF segundo pulso
         begin
         PPM <= 0; PPM_I <= 1;
         end
     //************************************************
     puntero = puntero+canal2;    
     if (contador == puntero)    // ON tercer pulso
         begin
         PPM <= 1; PPM_I <= 0;
         end
     puntero = puntero+3614;
     if (contador==puntero)      // OFF tercer pulso
         begin
         PPM <= 0; PPM_I <= 1;
         end
     //************************************************
     puntero = puntero+canal3;
     if (contador == puntero)    // ON cuarto pulso
         begin
         PPM <= 1; PPM_I <= 0;
         end
     puntero = puntero+3614;
     if (contador == puntero)    // OFF cuarto pulso
         begin
         PPM <= 0; PPM_I <= 1;
         end
     //************************************************
     puntero = puntero+canal4;
     if (contador == puntero)    // ON quinto pulso
         begin
         PPM <= 1; PPM_I <= 0;
         end
     puntero = puntero+3614;
     if (contador == puntero)    // OFF quinto pulso
         begin
         PPM <= 0; PPM_I <= 1;
         end    
     //************************************************   
 
 
     end    
    
 
endmodule
