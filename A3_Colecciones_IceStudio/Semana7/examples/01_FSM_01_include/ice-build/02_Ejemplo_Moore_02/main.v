// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input vc61d8a,
 input vf11fea,
 input vclk,
 output v1e9507,
 output v211e71,
 output [0:5] vinit
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 assign w2 = vc61d8a;
 assign w3 = vf11fea;
 assign v1e9507 = w6;
 assign v211e71 = w7;
 assign w10 = vclk;
 assign w11 = vclk;
 assign w12 = vclk;
 assign w13 = vclk;
 assign w14 = vclk;
 assign w15 = vclk;
 assign w11 = w10;
 assign w12 = w10;
 assign w12 = w11;
 assign w13 = w10;
 assign w13 = w11;
 assign w13 = w12;
 assign w14 = w10;
 assign w14 = w11;
 assign w14 = w12;
 assign w14 = w13;
 assign w15 = w10;
 assign w15 = w11;
 assign w15 = w12;
 assign w15 = w13;
 assign w15 = w14;
 v21cfcc v26d692 (
  .v9fb85f(w5)
 );
 vcfd9ba vb66e72 (
  .vd4e5d7(w0),
  .v6a82dd(w1),
  .v444878(w10)
 );
 v3bfe20 v3edd33 (
  .v3c12b5(w1),
  .ve7f5e6(w2),
  .v717e81(w11)
 );
 v8e2728 vf2f9c5 (
  .v10eedb(w0),
  .v2dffca(w4),
  .v0884a0(w12)
 );
 v3bfe20 v44df28 (
  .ve7f5e6(w3),
  .v3c12b5(w9),
  .v717e81(w13)
 );
 v029a11 vfe08da (
  .v6817fd(w4),
  .vc7d589(w5),
  .v3f8381(w6),
  .v1169dd(w7),
  .vf3d207(w8),
  .v44d439(w14)
 );
 v8e2728 vaec9db (
  .v2dffca(w8),
  .v10eedb(w9),
  .v0884a0(w15)
 );
 assign vinit = 6'b000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 0
/*-------------------------------------------------*/

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule
//---- Top entity
module vcfd9ba (
 input v444878,
 input v6a82dd,
 output vd4e5d7
);
 wire w0;
 wire w1;
 wire w2;
 assign vd4e5d7 = w0;
 assign w1 = v444878;
 assign w2 = v6a82dd;
 vcfd9ba_va7041c va7041c (
  .out(w0),
  .clk(w1),
  .in(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Debouncer  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Remove the rebound on a mechanical switch
/*-------------------------------------------------*/

module vcfd9ba_va7041c (
 input clk,
 input in,
 output out
);
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 assign out = btn_out_r;
 
endmodule
//---- Top entity
module v3bfe20 (
 input v717e81,
 input ve7f5e6,
 output v3c12b5
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = ve7f5e6;
 assign w1 = v717e81;
 assign v3c12b5 = w2;
 v3bfe20_v683a9f v683a9f (
  .i(w0),
  .clk(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sync  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sincronizar las entradas de datos con el reloj del sistema
/*-------------------------------------------------*/

module v3bfe20_v683a9f (
 input clk,
 input i,
 output o
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d1;
 reg d2;
 
 always @(posedge clk)
  d1 <= i;
  
 always @(posedge clk)
   d2 <= d1;
   
 assign o = d2;
endmodule
//---- Top entity
module v8e2728 (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v8e2728_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Subida  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente
/*-------------------------------------------------*/

module v8e2728_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (~q & i);  
endmodule
//---- Top entity
module v029a11 (
 input v6817fd,
 input vf3d207,
 input vc7d589,
 input v44d439,
 output v3f8381,
 output v1169dd
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 assign v3f8381 = w0;
 assign v1169dd = w1;
 assign w2 = v6817fd;
 assign w3 = vf3d207;
 assign w4 = vc7d589;
 assign w5 = v44d439;
 v029a11_vd538b6 vd538b6 (
  .O1(w0),
  .O2(w1),
  .A(w2),
  .B(w3),
  .reset(w4),
  .clk(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Moore Verilog  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Ejemplo de una mÃ¡quina de estados tipo Moore
/*-------------------------------------------------*/

module v029a11_vd538b6 (
 input A,
 input B,
 input reset,
 input clk,
 output O1,
 output O2
);
 
 
 //@include 01_moore.v
 
 my_moore1  miMaquina(.clk(clk),.reset(reset),.inA(A),.inB(B),.OutA(O1),.OutB(O2));
endmodule
