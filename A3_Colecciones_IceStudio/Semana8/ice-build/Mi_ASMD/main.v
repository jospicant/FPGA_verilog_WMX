// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input [2:0] v4ff105,
 input ve35150,
 input v998d07,
 input v98d7c1,
 input vec8411,
 input vfc0c62,
 output ve0793c,
 output v86c7f4,
 output v8a6138,
 output v7c09bb,
 output v84b653,
 output [0:7] vinit
);
 wire [0:2] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign w0 = v4ff105;
 assign w1 = ve35150;
 assign w2 = v998d07;
 assign w3 = v98d7c1;
 assign w4 = vec8411;
 assign w5 = vfc0c62;
 assign ve0793c = w6;
 assign v86c7f4 = w7;
 assign v8a6138 = w8;
 assign v7c09bb = w9;
 assign v84b653 = w10;
 main_vee177d vee177d (
  .n(w0),
  .FIN_T1(w1),
  .START(w2),
  .DATO_TX(w3),
  .reset(w4),
  .clk(w5),
  .INICIA_T1(w6),
  .RESET_N(w7),
  .INC_N(w8),
  .LOAD_DATO(w9),
  .TX_DATO(w10)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*-- Mi_ASMD  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module main_vee177d (
 input [2:0] n,
 input FIN_T1,
 input START,
 input DATO_TX,
 input reset,
 input clk,
 output INICIA_T1,
 output RESET_N,
 output INC_N,
 output LOAD_DATO,
 output TX_DATO
);
 
 parameter [1:0] S0=0,S1=1,S2=2,S3=3;
 
 reg INICIA_T1=0,RESET_N=0,INC_N=0, LOAD_DATO=0,TX_DATO=0;
 
 reg [1:0]  estadoActual=0, estadoNext=0;
 
 // bloque secuencial. Capturar estado Actual
 always @(posedge clk or posedge reset)
 if(reset) estadoActual <= S0;
 else estadoActual <= estadoNext;
 
 // Bloque combinacional. Calculamos estado siguiente y valor de las
 // salidas en función de las entradas y del estado.
 always @(*)  // * para todas
 begin
   //valores por defecto
   INICIA_T1    = 0;
   RESET_N      = 0;
   INC_N        = 0;
   LOAD_DATO    = 0;
   TX_DATO      = 0;
   estadoNext   = 'bx; //Depuración
   
   case(estadoActual)
      S0:begin                                   RESET_N=1;
         if(START)         estadoNext = S1;
         else              estadoNext = S0;
         end
      S1:begin
                                                 INICIA_T1 = 1'b1;
         if(FIN_T1) begin                        LOAD_DATO = 1'b1;
                           estadoNext = S2; end
         else              estadoNext = S1;
         end
      S2:begin
         if (n >= 4) begin                         RESET_N = 1'b1;
                           estadoNext = S0; end
         else begin                                TX_DATO = 1'b1;
                           estadoNext = S3; end
         end                  
      S3: if(DATO_TX)      estadoNext = S3;
          else begin                               INC_N   = 1'b1;
                           estadoNext = S1; end
      default:             estadoNext = S0;
    endcase
 end
endmodule
